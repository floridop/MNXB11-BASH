BASH=/bin/bash
BASHOPTS=checkwinsize:cmdhist:complete_fullquote:expand_aliases:extglob:extquote:force_fignore:globasciiranges:histappend:interactive_comments:progcomp:promptvars:sourcepath
BASHRCSOURCED=Y
BASH_ALIASES=()
BASH_ARGC=([0]="0")
BASH_ARGV=()
BASH_CMDS=()
BASH_COMPLETION_VERSINFO=([0]="2" [1]="11")
BASH_ENV=/usr/share/lmod/lmod/init/bash
BASH_LINENO=()
BASH_REMATCH=()
BASH_SOURCE=()
BASH_VERSINFO=([0]="5" [1]="1" [2]="8" [3]="1" [4]="release" [5]="x86_64-redhat-linux-gnu")
BASH_VERSION='5.1.8(1)-release'
COBBLER_SERVER=10.50.0.1
COLORTERM=truecolor
COLUMNS=101
COMP_WORDBREAKS=$' \t\n"\'><=;|&(:'
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/6312/bus
DEBUGINFOD_URLS='https://debuginfod.centos.org/ '
DESKTOP_SESSION=gnome
DIRSTACK=()
DISPLAY=:37
EUID=6312
GNOME_TERMINAL_SCREEN=/org/gnome/Terminal/screen/77ad3b3c_2eb9_4869_a979_476d5c6fe2e3
GNOME_TERMINAL_SERVICE=:1.92
GROUPS=()
HISTCONTROL=ignoredups
HISTFILE=/home/pflorido/.bash_history
HISTFILESIZE=1000
HISTSIZE=1000
HOME=/home/pflorido
HOSTNAME=cosmos3
HOSTTYPE=x86_64
ID=6312
IFS=$' \t\n'
KRB5CCNAME=/var/opt/thinlinc/sessions/pflorido/37/krb5cc
LANG=en_US.UTF-8
LD_LIBRARY_PATH=/opt/thinlinc/lib64:/opt/thinlinc/lib
LESSOPEN='||/usr/bin/lesspipe.sh %s'
LINES=51
LMOD_CMD=/usr/share/lmod/lmod/libexec/lmod
LMOD_DIR=/usr/share/lmod/lmod/libexec
LMOD_PKG=/usr/share/lmod/lmod
LMOD_RC=/sw/lmod/lmodrc.lua
LMOD_ROOT=/usr/share/lmod
LMOD_SETTARG_FULL_SUPPORT=no
LMOD_SYSTEM_DEFAULT_MODULES=SoftwareTree/Milan
LMOD_VERSION=8.7.20
LMOD_sys=Linux
LOADEDMODULES=SoftwareTree/Milan
LOGNAME=pflorido
LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.m4a=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.oga=01;36:*.opus=01;36:*.spx=01;36:*.xspf=01;36:'
MACHTYPE=x86_64-redhat-linux-gnu
MAIL=/var/spool/mail/pflorido
MAILCHECK=60
MANPATH=/usr/share/lmod/lmod/share/man::/opt/thinlinc/share/man
MODULEPATH=/etc/scl/modulefiles:/sw/Modules/modulefiles/Core:/sw/easybuild_milan/modules/all/Core:/etc/modulefiles:/usr/share/modulefiles:/usr/share/modulefiles/Linux:/usr/share/modulefiles/Core:/usr/share/lmod/lmod/modulefiles/Core
MODULEPATH_ROOT=/sw/Modules/modulefiles:/usr/share/modulefiles
MODULESHOME=/usr/share/Modules
OLDPWD=/home/pflorido/git/MNXB11-BASH/exercises
ONDEMAND_DT_DIR=/sw/pkg/gfxlauncher
OPTERR=1
OPTIND=1
OSTYPE=linux-gnu
PATH=/sw/pkg/gfxlauncher:/home/pflorido/bin:/sw/pkg/gfxlauncher:/bin:/usr/bin:/opt/thinlinc/bin:/usr/local/bin:/usr/bin/X11:/sbin:/usr/sbin:/usr/local/sbin:.:/sw/pkg/lunarc/bin:/sw/pkg/slurm/local/bin:.:/sw/pkg/lunarc/bin:/sw/pkg/slurm/local/bin
PCSCTUN_COOKIE=/var/opt/thinlinc/sessions/pflorido/37/pcsctun-cookie
PCSCTUN_SERVER=127.0.0.1:5276
PIPESTATUS=([0]="0")
PPID=3486513
PROMPT_COMMAND=__vte_prompt_command
PS0=$'\E]777;preexec\E\\'
PS1='[\u@\h \W]\$ '
PS2='> '
PS4='+ '
PULSE_COOKIE=/var/opt/thinlinc/sessions/pflorido/37/pulse-cookie
PULSE_SERVER=127.0.0.1:5275
PWD=/home/pflorido/git/MNXB11-BASH/exercises/ex4.17
PYTHON_EXEC='/usr/bin/env python3'
QT_IM_MODULE=ibus
REPLY='#!/bin/bash'
SESSION_MANAGER=local/unix:@/tmp/.ICE-unix/3485440,unix/unix:/tmp/.ICE-unix/3485440
SHELL=/bin/bash
SHELLOPTS=braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor
SHLVL=1
SNIC_TMP=snic_tmp
SSH_AUTH_SOCK=/run/user/6312/keyring/ssh
SYSTEMD_EXEC_PID=3485467
S_COLORS=auto
TERM=xterm-256color
TLPREFIX=/opt/thinlinc
TLPROFILE=gnome
TLSESSIONDATA=/var/opt/thinlinc/sessions/pflorido/37
TOWN=Springfield
UID=6312
USER=pflorido
USERNAME=pflorido
VTE_VERSION=6402
XAUTHORITY=/var/opt/thinlinc/sessions/pflorido/37/Xauthority
XDG_CURRENT_DESKTOP=GNOME
XDG_DATA_DIRS=/home/pflorido/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share
XDG_MENU_PREFIX=gnome-
XDG_RUNTIME_DIR=/run/user/6312
XDG_SESSION_CLASS=user
XDG_SESSION_DESKTOP=gnome
XDG_SESSION_TYPE=x11
XMODIFIERS=@im=ibus
_=--color
_LMFILES_=/usr/share/lmod/lmod/modulefiles/Core/SoftwareTree/Milan.lua
_ModuleTable001_=X01vZHVsZVRhYmxlXyA9IHsKTVR2ZXJzaW9uID0gMywKY19yZWJ1aWxkVGltZSA9IGZhbHNlLApjX3Nob3J0VGltZSA9IGZhbHNlLApkZXB0aFQgPSB7fSwKZmFtaWx5ID0ge30sCm1UID0gewpTb2Z0d2FyZVRyZWUgPSB7CmZuID0gIi91c3Ivc2hhcmUvbG1vZC9sbW9kL21vZHVsZWZpbGVzL0NvcmUvU29mdHdhcmVUcmVlL01pbGFuLmx1YSIsCmZ1bGxOYW1lID0gIlNvZnR3YXJlVHJlZS9NaWxhbiIsCmxvYWRPcmRlciA9IDEsCnByb3BUID0gewpsbW9kID0gewpzdGlja3kgPSAxLAp9LAp9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIlNvZnR3YXJlVHJlZS9NaWxhbiIsCndWID0gIiptaWxhbi4qemZpbmFsIiwKfSwKfSwKbXBhdGhB
_ModuleTable002_=ID0gewoiL2V0Yy9zY2wvbW9kdWxlZmlsZXMiLCAiL3N3L01vZHVsZXMvbW9kdWxlZmlsZXMvQ29yZSIKLCAiL3N3L2Vhc3lidWlsZF9taWxhbi9tb2R1bGVzL2FsbC9Db3JlIiwgIi9ldGMvc2NsL21vZHVsZWZpbGVzIgosICIvZXRjL21vZHVsZWZpbGVzIiwgIi91c3Ivc2hhcmUvbW9kdWxlZmlsZXMiLCAiL3Vzci9zaGFyZS9tb2R1bGVmaWxlcy9MaW51eCIKLCAiL3Vzci9zaGFyZS9tb2R1bGVmaWxlcy9Db3JlIiwgIi91c3Ivc2hhcmUvbG1vZC9sbW9kL21vZHVsZWZpbGVzL0NvcmUiLAp9LApzeXN0ZW1CYXNlTVBBVEggPSAiL2V0Yy9zY2wvbW9kdWxlZmlsZXM6L2V0Yy9tb2R1bGVmaWxlczovdXNyL3NoYXJlL21vZHVsZWZpbGVzOi91c3Ivc2hhcmUvbW9kdWxlZmlsZXMv
_ModuleTable003_=TGludXg6L3Vzci9zaGFyZS9tb2R1bGVmaWxlcy9Db3JlOi91c3Ivc2hhcmUvbG1vZC9sbW9kL21vZHVsZWZpbGVzL0NvcmUiLAp9Cg==
_ModuleTable_Sz_=3
__Init_Default_Modules=1
__LMOD_REF_COUNT_MODULEPATH='/etc/scl/modulefiles:2;/sw/Modules/modulefiles/Core:1;/sw/easybuild_milan/modules/all/Core:1;/etc/modulefiles:1;/usr/share/modulefiles:1;/usr/share/modulefiles/Linux:1;/usr/share/modulefiles/Core:1;/usr/share/lmod/lmod/modulefiles/Core:1'
__LMOD_REF_COUNT_MODULEPATH_ROOT='/sw/Modules/modulefiles:1;/usr/share/modulefiles:1'
__lmod_my_status=0
_backup_glob='@(#*#|*@(~|.@(bak|orig|rej|swp|dpkg*|rpm@(orig|new|save))))'
_xspecs=([tex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [freeamp]="!*.@(mp3|ogg|pls|m3u)" [gqmpeg]="!*.@(mp3|ogg|pls|m3u)" [texi2html]="!*.texi*" [hbpp]="!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])" [lowriter]="!*.@(sxw|stw|sxg|sgl|doc?([mx])|dot?([mx])|rtf|txt|htm|html|?(f)odt|ott|odm|pdf)" [rpm2cpio]="!*.[rs]pm" [localc]="!*.@(sxc|stc|xls?([bmx])|xlw|xlt?([mx])|[ct]sv|?(f)ods|ots)" [hbrun]="!*.[Hh][Rr][Bb]" [vi]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [latex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [view]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [madplay]="!*.mp3" [compress]="*.Z" [pdfjadetex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [pbunzip2]="!*.?(t)bz?(2)" [lrunzip]="!*.lrz" [gunzip]="!*.@(Z|[gGd]z|t[ag]z)" [oowriter]="!*.@(sxw|stw|sxg|sgl|doc?([mx])|dot?([mx])|rtf|txt|htm|html|?(f)odt|ott|odm|pdf)" [epiphany]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [acroread]="!*.[pf]df" [znew]="*.Z" [kwrite]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [xemacs]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [gview]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [lzfgrep]="!*.@(tlz|lzma)" [lzless]="!*.@(tlz|lzma)" [cdiff]="!*.@(dif?(f)|?(d)patch)?(.@([gx]z|bz2|lzma))" [zipinfo]="!*.@(zip|[aegjswx]ar|exe|pk3|wsz|zargo|xpi|s[tx][cdiw]|sx[gm]|o[dt][tspgfc]|od[bm]|oxt|epub|apk|aab|ipa|do[ct][xm]|p[op]t[mx]|xl[st][xm]|pyz|whl)" [pdflatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [portecle]="!@(*.@(ks|jks|jceks|p12|pfx|bks|ubr|gkr|cer|crt|cert|p7b|pkipath|pem|p10|csr|crl)|cacerts)" [modplugplay]="!*.@(669|abc|am[fs]|d[bs]m|dmf|far|it|mdl|m[eo]d|mid?(i)|mt[2m]|oct|okt?(a)|p[st]m|s[3t]m|ult|umx|wav|xm)" [lokalize]="!*.po" [lbzcat]="!*.?(t)bz?(2)" [qiv]="!*.@(gif|jp?(e)g|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm|svg)" [totem]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmv]|OG[AGMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" [ps2pdfwr]="!*.@(?(e)ps|pdf)" [dvitype]="!*.dvi" [unpigz]="!*.@(Z|[gGdz]z|t[ag]z)" [mozilla]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [pdfunite]="!*.pdf" [gpdf]="!*.[pf]df" [texi2dvi]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [bunzip2]="!*.?(t)bz?(2)" [zathura]="!*.@(cb[rz7t]|djv?(u)|?(e)ps|pdf)" [kaffeine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmv]|OG[AGMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" [mpg123]="!*.mp3" [lzegrep]="!*.@(tlz|lzma)" [xv]="!*.@(gif|jp?(e)g?(2)|j2[ck]|jp[2f]|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm|?(e)ps)" [xdvi]="!*.@(dvi|DVI)?(.@(gz|Z|bz2))" [xfig]="!*.fig" [xpdf]="!*.[pf]df" [oobase]="!*.odb" [xelatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [gharbour]="!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])" [bzcat]="!*.?(t)bz?(2)" [dragon]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmv]|OG[AGMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" [xanim]="!*.@(mpg|mpeg|avi|mov|qt)" [lualatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [rgview]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [rvim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [xetex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [lomath]="!*.@(sxm|smf|mml|odf)" [zcat]="!*.@(Z|[gGd]z|t[ag]z)" [lynx]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [uncompress]="!*.Z" [xzcat]="!*.@(?(t)xz|tlz|lzma)" [vim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [loimpress]="!*.@(sxi|sti|pps?(x)|ppt?([mx])|pot?([mx])|?(f)odp|otp)" [dvipdf]="!*.dvi" [mpg321]="!*.mp3" [jadetex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [lobase]="!*.odb" [epdfview]="!*.pdf" [ps2pdf14]="!*.@(?(e)ps|pdf)" [ps2pdf13]="!*.@(?(e)ps|pdf)" [ps2pdf12]="!*.@(?(e)ps|pdf)" [poedit]="!*.po" [luatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [kbabel]="!*.po" [bzme]="!*.@(zip|z|gz|tgz)" [dviselect]="!*.dvi" [realplay]="!*.@(rm?(j)|ra?(m)|smi?(l))" [kdvi]="!*.@(dvi|DVI)?(.@(gz|Z|bz2))" [elinks]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [kghostview]="!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))" [gtranslator]="!*.po" [unzip]="!*.@(zip|[aegjswx]ar|exe|pk3|wsz|zargo|xpi|s[tx][cdiw]|sx[gm]|o[dt][tspgfc]|od[bm]|oxt|epub|apk|aab|ipa|do[ct][xm]|p[op]t[mx]|xl[st][xm]|pyz|whl)" [ggv]="!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))" [oomath]="!*.@(sxm|smf|mml|odf)" [dvipdfmx]="!*.dvi" [makeinfo]="!*.texi*" [okular]="!*.@(okular|@(?(e|x)ps|?(E|X)PS|[pf]df|[PF]DF|dvi|DVI|cb[rz]|CB[RZ]|djv?(u)|DJV?(U)|dvi|DVI|gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx|GIF|JP?(E)G|MIFF|TIF?(F)|PN[GM]|P[BGP]M|BMP|XPM|ICO|XWD|TGA|PCX|epub|EPUB|odt|ODT|fb?(2)|FB?(2)|mobi|MOBI|g3|G3|chm|CHM)?(.?(gz|GZ|bz2|BZ2|xz|XZ)))" [sxemacs]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [aviplay]="!*.@(avi|asf|wmv)" [rgvim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [dvipdfm]="!*.dvi" [ly2dvi]="!*.ly" [oodraw]="!*.@(sxd|std|sda|sdd|?(f)odg|otg)" [kpdf]="!*.@(?(e)ps|pdf)" [bibtex]="!*.aux" [netscape]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [emacs]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [rview]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [galeon]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [dillo]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [fbxine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmv]|OG[AGMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" [oocalc]="!*.@(sxc|stc|xls?([bmx])|xlw|xlt?([mx])|[ct]sv|?(f)ods|ots)" [harbour]="!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])" [lodraw]="!*.@(sxd|std|sda|sdd|?(f)odg|otg)" [dvips]="!*.dvi" [ps2pdf]="!*.@(?(e)ps|pdf)" [kate]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [kid3-qt]="!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)" [pdftex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [gvim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [timidity]="!*.@(mid?(i)|rmi|rcp|[gr]36|g18|mod|xm|it|x3m|s[3t]m|kar)" [ogg123]="!*.@(og[ag]|m3u|flac|spx)" [lzgrep]="!*.@(tlz|lzma)" [ee]="!*.@(gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx)" [unlzma]="!*.@(tlz|lzma)" [lbunzip2]="!*.?(t)bz?(2)" [ooimpress]="!*.@(sxi|sti|pps?(x)|ppt?([mx])|pot?([mx])|?(f)odp|otp)" [xine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmv]|OG[AGMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" [amaya]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [gv]="!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))" [kid3]="!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)" [lilypond]="!*.ly" [modplug123]="!*.@(669|abc|am[fs]|d[bs]m|dmf|far|it|mdl|m[eo]d|mid?(i)|mt[2m]|oct|okt?(a)|p[st]m|s[3t]m|ult|umx|wav|xm)" [pbzcat]="!*.?(t)bz?(2)" [unxz]="!*.@(?(t)xz|tlz|lzma)" [playmidi]="!*.@(mid?(i)|cmf)" [lzcat]="!*.@(tlz|lzma)" [slitex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [aaxine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmv]|OG[AGMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.@(crdownload|part))" [advi]="!*.dvi" [lzmore]="!*.@(tlz|lzma)" )
colors=/home/pflorido/.dircolors
mpi_selection=
mpi_selector_dir=/var/mpi-selector/data
mpi_selector_homefile=/home/pflorido/.mpi-selector
mpi_selector_sysfile=/etc/sysconfig/mpi-selector
new_dirs=
preload__ltrim_colon_completions=true
preload_get_comp_words_by_ref=true
shell=bash
which_declare='declare -f'
which_opt=-f
__expand_tilde_by_ref () 
{ 
    if [[ ${!1-} == \~* ]]; then
        eval $1="$(printf ~%q "${!1#\~}")";
    fi
}
__get_cword_at_cursor_by_ref () 
{ 
    local cword words=();
    __reassemble_comp_words_by_ref "$1" words cword;
    local i cur="" index=$COMP_POINT lead=${COMP_LINE:0:COMP_POINT};
    if [[ $index -gt 0 && ( -n $lead && -n ${lead//[[:space:]]/} ) ]]; then
        cur=$COMP_LINE;
        for ((i = 0; i <= cword; ++i))
        do
            while [[ ${#cur} -ge ${#words[i]} && ${cur:0:${#words[i]}} != "${words[i]-}" ]]; do
                cur="${cur:1}";
                ((index > 0)) && ((index--));
            done;
            if ((i < cword)); then
                local old_size=${#cur};
                cur="${cur#"${words[i]}"}";
                local new_size=${#cur};
                ((index -= old_size - new_size));
            fi;
        done;
        [[ -n $cur && ! -n ${cur//[[:space:]]/} ]] && cur=;
        ((index < 0)) && index=0;
    fi;
    local "$2" "$3" "$4" && _upvars -a${#words[@]} $2 ${words+"${words[@]}"} -v $3 "$cword" -v $4 "${cur:0:index}"
}
__hosted_repos () 
{ 
    local predicate="$1";
    local reply=;
    if [ x"$predicate" != x"" ]; then
        reply=$(cvmfs_server list 2>/dev/null | awk "$predicate");
    else
        reply=$(cvmfs_server list 2>/dev/null);
    fi;
    echo "$reply" | awk '{ print $1 }'
}
__load_completion () 
{ 
    local -a dirs=(${BASH_COMPLETION_USER_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/bash-completion}/completions);
    local ifs=$IFS IFS=: dir cmd="${1##*/}" compfile;
    [[ -n $cmd ]] || return 1;
    for dir in ${XDG_DATA_DIRS:-/usr/local/share:/usr/share};
    do
        dirs+=($dir/bash-completion/completions);
    done;
    IFS=$ifs;
    if [[ $BASH_SOURCE == */* ]]; then
        dirs+=("${BASH_SOURCE%/*}/completions");
    else
        dirs+=(./completions);
    fi;
    local backslash=;
    if [[ $cmd == \\* ]]; then
        cmd="${cmd:1}";
        $(complete -p "$cmd" 2>/dev/null || echo false) "\\$cmd" && return 0;
        backslash=\\;
    fi;
    for dir in "${dirs[@]}";
    do
        [[ -d $dir ]] || continue;
        for compfile in "$cmd" "$cmd.bash" "_$cmd";
        do
            compfile="$dir/$compfile";
            if [[ -f $compfile ]] && . "$compfile" &> /dev/null; then
                [[ -n $backslash ]] && $(complete -p "$cmd") "\\$cmd";
                return 0;
            fi;
        done;
    done;
    [[ -v _xspecs[$cmd] ]] && complete -F _filedir_xspec "$cmd" "$backslash$cmd" && return 0;
    return 1
}
__local_repos () 
{ 
    eval $(grep '^CVMFS_REPOSITORIES=' /etc/cvmfs/default.local);
    __local_repos=$(echo $CVMFS_REPOSITORIES | sed 's/,/ /g' );
    unset CVMFS_REPOSITORIES;
    echo $__local_repos
}
__ltrim_colon_completions () 
{ 
    if [[ $1 == *:* && $COMP_WORDBREAKS == *:* ]]; then
        local colon_word=${1%"${1##*:}"};
        local i=${#COMPREPLY[*]};
        while ((i-- > 0)); do
            COMPREPLY[i]=${COMPREPLY[i]#"$colon_word"};
        done;
    fi
}
__my_reassemble_comp_words_by_ref () 
{ 
    local exclude i j first;
    exclude="${1//[^$COMP_WORDBREAKS]}";
    cword_=$COMP_CWORD;
    if [ -z "$exclude" ]; then
        words_=("${COMP_WORDS[@]}");
        return;
    fi;
    for ((i=0, j=0; i < ${#COMP_WORDS[@]}; i++, j++))
    do
        first=t;
        while [ $i -gt 0 ] && [ -n "${COMP_WORDS[$i]}" ] && [ "${COMP_WORDS[$i]//[^$exclude]}" = "${COMP_WORDS[$i]}" ]; do
            if [ $j -ge 2 ] && [ -n "$first" ]; then
                ((j--));
            fi;
            first=;
            words_[$j]=${words_[j]}${COMP_WORDS[i]};
            if [ $i = $COMP_CWORD ]; then
                cword_=$j;
            fi;
            if (($i < ${#COMP_WORDS[@]} - 1)); then
                ((i++));
            else
                return;
            fi;
        done;
        words_[$j]=${words_[j]}${COMP_WORDS[i]};
        if [ $i = $COMP_CWORD ]; then
            cword_=$j;
        fi;
    done
}
__parse_options () 
{ 
    local option option2 i IFS=' 	
,/|';
    option=;
    local -a array=($1);
    for i in "${array[@]}";
    do
        case "$i" in 
            ---*)
                break
            ;;
            --?*)
                option=$i;
                break
            ;;
            -?*)
                [[ -n $option ]] || option=$i
            ;;
            *)
                break
            ;;
        esac;
    done;
    [[ -n $option ]] || return 0;
    IFS=' 	
';
    if [[ $option =~ (\[((no|dont)-?)\]). ]]; then
        option2=${option/"${BASH_REMATCH[1]}"/};
        option2=${option2%%[<{().[]*};
        printf '%s\n' "${option2/=*/=}";
        option=${option/"${BASH_REMATCH[1]}"/"${BASH_REMATCH[2]}"};
    fi;
    option=${option%%[<{().[]*};
    printf '%s\n' "${option/=*/=}"
}
__perf_main () 
{ 
    local cmd;
    cmd=${words[0]};
    COMPREPLY=();
    __perf_prev_skip_opts;
    if [ -z $prev_skip_opts ]; then
        if [[ $cur == --* ]]; then
            cmds=$($cmd --list-opts);
        else
            cmds=$($cmd --list-cmds);
        fi;
        __perfcomp "$cmds" "$cur";
    else
        if [[ $prev == @("-e"|"--event") && $prev_skip_opts == @(record|stat|top) ]]; then
            local cur1=${COMP_WORDS[COMP_CWORD]};
            local raw_evts=$($cmd list --raw-dump);
            local arr s tmp result;
            if [[ "$cur1" == */* && ${cur1#*/} =~ ^[A-Z] ]]; then
                OLD_IFS="$IFS";
                IFS=" ";
                arr=($raw_evts);
                IFS="$OLD_IFS";
                for s in ${arr[@]};
                do
                    if [[ "$s" == *cpu/* ]]; then
                        tmp=${s#*cpu/};
                        result=$result" ""cpu/"${tmp^^};
                    else
                        result=$result" "$s;
                    fi;
                done;
                evts=${result}" "$(ls /sys/bus/event_source/devices/cpu/events);
            else
                evts=${raw_evts}" "$(ls /sys/bus/event_source/devices/cpu/events);
            fi;
            if [[ "$cur1" == , ]]; then
                __perfcomp_colon "$evts" "";
            else
                __perfcomp_colon "$evts" "$cur1";
            fi;
        else
            if [[ $prev_skip_opts == @(kvm|kmem|mem|lock|sched|
			|data|help|script|test|timechart|trace) ]]; then
                subcmds=$($cmd $prev_skip_opts --list-cmds);
                __perfcomp_colon "$subcmds" "$cur";
            fi;
            if [[ $cur == --* ]]; then
                subcmd=$prev_skip_opts;
                __perf_prev_skip_opts $subcmd;
                subcmd=$subcmd" "$prev_skip_opts;
                opts=$($cmd $subcmd --list-opts);
                __perfcomp "$opts" "$cur";
            fi;
        fi;
    fi
}
__perf_prev_skip_opts () 
{ 
    local i cmd_ cmds_;
    let i=cword-1;
    cmds_=$($cmd $1 --list-cmds);
    prev_skip_opts=();
    while [ $i -ge 0 ]; do
        if [[ ${words[i]} == $1 ]]; then
            return;
        fi;
        for cmd_ in $cmds_;
        do
            if [[ ${words[i]} == $cmd_ ]]; then
                prev_skip_opts=${words[i]};
                return;
            fi;
        done;
        ((i--));
    done
}
__perfcomp () 
{ 
    COMPREPLY=($( compgen -W "$1" -- "$2" ))
}
__perfcomp_colon () 
{ 
    __perfcomp "$1" "$2";
    if [ $preload__ltrim_colon_completions = "true" ]; then
        __ltrim_colon_completions $cur;
    else
        __perf__ltrim_colon_completions $cur;
    fi
}
__python_argcomplete_expand_tilde_by_ref () 
{ 
    if [ "${!1:0:1}" = "~" ]; then
        if [ "${!1}" != "${!1//\/}" ]; then
            eval $1="${!1/%\/*}"/'${!1#*/}';
        else
            eval $1="${!1}";
        fi;
    fi
}
__python_argcomplete_run () 
{ 
    if [[ -z "$ARGCOMPLETE_USE_TEMPFILES" ]]; then
        __python_argcomplete_run_inner "$@";
        return;
    fi;
    local tmpfile="$(mktemp)";
    _ARGCOMPLETE_STDOUT_FILENAME="$tmpfile" __python_argcomplete_run_inner "$@";
    local code=$?;
    cat "$tmpfile";
    rm "$tmpfile";
    return $code
}
__python_argcomplete_run_inner () 
{ 
    if [[ -z "$_ARC_DEBUG" ]]; then
        "$@" 8>&1 9>&2 > /dev/null 2>&1;
    else
        "$@" 8>&1 9>&2 1>&9 2>&1;
    fi
}
__python_argcomplete_scan_head () 
{ 
    read -s -r ${3:--N} 1024 < "$1";
    [[ "$REPLY" =~ ${2:-PYTHON_ARGCOMPLETE_OK} ]]
}
__python_argcomplete_scan_head_noerr () 
{ 
    __python_argcomplete_scan_head "$@" 2> /dev/null
}
__reassemble_comp_words_by_ref () 
{ 
    local exclude i j line ref;
    if [[ -n $1 ]]; then
        exclude="[${1//[^$COMP_WORDBREAKS]/}]";
    fi;
    printf -v "$3" %s "$COMP_CWORD";
    if [[ -v exclude ]]; then
        line=$COMP_LINE;
        for ((i = 0, j = 0; i < ${#COMP_WORDS[@]}; i++, j++))
        do
            while [[ $i -gt 0 && ${COMP_WORDS[i]} == +($exclude) ]]; do
                [[ $line != [[:blank:]]* ]] && ((j >= 2)) && ((j--));
                ref="$2[$j]";
                printf -v "$ref" %s "${!ref-}${COMP_WORDS[i]}";
                ((i == COMP_CWORD)) && printf -v "$3" %s "$j";
                line=${line#*"${COMP_WORDS[i]}"};
                [[ $line == [[:blank:]]* ]] && ((j++));
                ((i < ${#COMP_WORDS[@]} - 1)) && ((i++)) || break 2;
            done;
            ref="$2[$j]";
            printf -v "$ref" %s "${!ref-}${COMP_WORDS[i]}";
            line=${line#*"${COMP_WORDS[i]}"};
            ((i == COMP_CWORD)) && printf -v "$3" %s "$j";
        done;
        ((i == COMP_CWORD)) && printf -v "$3" %s "$j";
    else
        for i in "${!COMP_WORDS[@]}";
        do
            printf -v "$2[i]" %s "${COMP_WORDS[i]}";
        done;
    fi
}
__tags () 
{ 
    local reply="";
    for repo in $(__hosted_repos '/stratum0/');
    do
        reply="$(cvmfs_server tag -lx $repo | awk '{print $1}') $reply";
    done;
    echo $reply
}
__vte_osc7 () 
{ 
    printf "\033]7;file://%s%s\033\\" "${HOSTNAME}" "$(/usr/libexec/vte-urlencode-cwd)"
}
__vte_prompt_command () 
{ 
    local command=$(HISTTIMEFORMAT= history 1 | sed 's/^ *[0-9]\+ *//');
    command="${command//;/ }";
    local pwd='~';
    [ "$PWD" != "$HOME" ] && pwd=${PWD/#$HOME\//\~\/};
    pwd="${pwd//[[:cntrl:]]}";
    printf '\033]777;notify;Command completed;%s\033\\\033]777;precmd\033\\\033]0;%s@%s:%s\033\\' "${command}" "${USER}" "${HOSTNAME%%.*}" "${pwd}";
    __vte_osc7
}
_addDelimiterToStringList () 
{ 
    str=$1;
    delimiter=$2;
    echo "$str" | sed "s/[^ ]* */$delimiter&/g"
}
_allowed_groups () 
{ 
    if _complete_as_root; then
        local IFS='
';
        COMPREPLY=($(compgen -g -- "$1"));
    else
        local IFS='
 ';
        COMPREPLY=($(compgen -W             "$(id -Gn 2>/dev/null || groups 2>/dev/null)" -- "$1"));
    fi
}
_allowed_users () 
{ 
    if _complete_as_root; then
        local IFS='
';
        COMPREPLY=($(compgen -u -- "${1:-$cur}"));
    else
        local IFS='
 ';
        COMPREPLY=($(compgen -W             "$(id -un 2>/dev/null || whoami 2>/dev/null)" -- "${1:-$cur}"));
    fi
}
_authselect_completions () 
{ 
    local COMMANDS;
    local command;
    local possibleopts;
    function is_valid_command () 
    { 
        local cmd;
        for cmd in "${COMMANDS[@]}";
        do
            if [[ "$cmd" = "$1" ]]; then
                return 0;
            fi;
        done;
        return 1
    };
    function get_command () 
    { 
        local opt;
        if [[ $COMP_CWORD -lt 2 ]]; then
            return;
        fi;
        for opt in "${COMP_WORDS[@]:0:$COMP_CWORD}";
        do
            if is_valid_command "$opt"; then
                echo "$opt";
                return;
            fi;
        done
    };
    function get_command_param () 
    { 
        local havecmd=0;
        local len=${#COMP_WORDS[@]}-1;
        if [[ "$command" = "" ]]; then
            return;
        fi;
        havecmd=0;
        for ((i=0; i<$len; i++ ))
        do
            if [[ "$havecmd" = "1" ]]; then
                if [[ "${COMP_WORDS[$i]}" =~ ^[-=] || "${COMP_WORDS[$i-1]}" = "=" ]]; then
                    continue;
                fi;
                echo "${COMP_WORDS[$i]}";
                return;
            fi;
            if [[ "${COMP_WORDS[$i]}" = "$command" ]]; then
                havecmd=1;
            fi;
        done
    };
    function get_profile () 
    { 
        case "$command" in 
            select | show | requirements | test | list-features)
                get_command_param
            ;;
            enable-feature | disable-feature)
                authselect current 2> /dev/null | head -n1 | cut -d" " -f3
            ;;
        esac
    };
    function get_command_keywords () 
    { 
        local profile;
        case "$command" in 
            select | requirements | test)
                profile="$(get_profile)";
                if [[ "$profile" != "" ]]; then
                    authselect list-features "$profile" 2> /dev/null;
                fi
            ;;
        esac
    };
    function get_command_options () 
    { 
        if [[ "${COMP_WORDS[$COMP_CWORD]}" =~ ^- ]]; then
            case "$command" in 
                select)
                    echo "--force --quiet --nobackup --backup="
                ;;
                apply-changes | disable-feature)
                    echo "--backup="
                ;;
                enable-feature)
                    echo "--backup= --quiet"
                ;;
                current | backup-list)
                    echo "--raw"
                ;;
                create-profile)
                    echo "--vendor --base-on= --base-on-default" "--symlink-meta --symlink-nsswitch --symlink-pam" "--symlink-dconf --symlink="
                ;;
                test)
                    echo "--all --nsswitch --system-auth --password-auth" "--smartcard-auth --fingerprint-auth --postlogin" "--dconf-db --dconf-lock"
                ;;
            esac;
        fi
    };
    function get_global_options () 
    { 
        if [[ "${COMP_WORDS[$COMP_CWORD]}" =~ ^- ]]; then
            echo "--debug --trace --warn --help";
        fi
    };
    function get_option_params () 
    { 
        local opt;
        if [[ $COMP_CWORD -gt 2 && "${COMP_WORDS[$COMP_CWORD-1]}" = "=" ]]; then
            opt="${COMP_WORDS[$COMP_CWORD-2]}";
        else
            if [[ $COMP_CWORD -gt 1 ]]; then
                opt="${COMP_WORDS[$COMP_CWORD-1]}";
            fi;
        fi;
        case "$opt" in 
            --base-on)
                authselect list 2> /dev/null | cut -d" " -f2
            ;;
            --symlink)
                echo "dconf-db dconf-locks fingerprint-auth nsswitch.conf" "password-auth postlogin smartcard-auth system-auth" "README REQUIREMENTS"
            ;;
        esac
    };
    function get_command_params () 
    { 
        local i;
        local profile;
        if [[ "$command" = "" ]]; then
            return;
        fi;
        for ((i=$COMP_CWORD-1; i>1; i-- ))
        do
            opt="${COMP_WORDS[$i]}";
            if [[ "$opt" = "$command" ]]; then
                break;
            fi;
            if [[ "$opt" =~ ^[-=] || "${COMP_WORDS[$i-1]}" = "=" ]]; then
                continue;
            fi;
            return;
        done;
        case "$command" in 
            select | show | requirements | test | list-features)
                authselect list 2> /dev/null | cut -d" " -f2
            ;;
            backup-remove | backup-restore)
                authselect backup-list 2> /dev/null | cut -d" " -f1
            ;;
            enable-feature | disable-feature)
                profile="$(get_profile)";
                if [[ "$profile" != "" ]]; then
                    authselect list-features "$profile" 2> /dev/null;
                fi
            ;;
        esac
    };
    COMMANDS=(select apply-changes list list-features show requirements current check test enable-feature disable-feature create-profile backup-list backup-remove backup-restore);
    possibleopts="$(get_option_params)";
    if [[ "$possibleopts" != "" ]]; then
        if [[ "${COMP_WORDS[$COMP_CWORD]}" = "=" ]]; then
            COMPREPLY=($(compgen -W "$possibleopts"));
        else
            COMPREPLY=($(compgen -W "$possibleopts" -- "${COMP_WORDS[$COMP_CWORD]}"));
        fi;
    else
        command="$(get_command)";
        if [[ "$command" = "" ]]; then
            possibleopts="$(get_global_options) ${COMMANDS[@]}";
        else
            possibleopts="$(get_global_options) $(get_command_params) $(get_command_keywords) $(get_command_options)";
        fi;
        COMPREPLY=($(compgen -W "$possibleopts" -- "${COMP_WORDS[$COMP_CWORD]}"));
    fi
}
_available_interfaces () 
{ 
    local PATH=$PATH:/sbin;
    COMPREPLY=($({
        if [[ ${1:-} == -w ]]; then
            iwconfig
        elif [[ ${1:-} == -a ]]; then
            ifconfig || ip link show up
        else
            ifconfig -a || ip link show
        fi
    } 2>/dev/null | awk         '/^[^ \t]/ { if ($1 ~ /^[0-9]+:/) { print $2 } else { print $1 } }'));
    COMPREPLY=($(compgen -W '${COMPREPLY[@]/%[[:punct:]]/}' -- "$cur"))
}
_bashcomp_try_faketty () 
{ 
    if type unbuffer &> /dev/null; then
        unbuffer -p "$@";
    else
        if script --version 2>&1 | command grep -qF util-linux; then
            script -qaefc "$*" /dev/null;
        else
            "$@";
        fi;
    fi
}
_bpftool () 
{ 
    local cur prev words objword;
    _init_completion || return;
    if [[ ${words[cword]} == -* ]]; then
        local c='--version --json --pretty --bpffs --mapcompat --debug \
	       --use-loader --base-btf --legacy';
        COMPREPLY=($( compgen -W "$c" -- "$cur" ));
        return 0;
    fi;
    case $prev in 
        help | hex | opcodes | visual | linum)
            return 0
        ;;
        tag)
            _bpftool_get_prog_tags;
            return 0
        ;;
        dev)
            _sysfs_get_netdevs;
            return 0
        ;;
        file | pinned | -B | --base-btf)
            _filedir;
            return 0
        ;;
        batch)
            COMPREPLY=($( compgen -W 'file' -- "$cur" ));
            return 0
        ;;
    esac;
    local i;
    for ((i=1; i < ${#words[@]}; 1))
    do
        if [[ ${words[i]::1} == - ]] && [[ ${words[i]} != "-B" ]] && [[ ${words[i]} != "--base-btf" ]]; then
            words=("${words[@]:0:i}" "${words[@]:i+1}");
            [[ $i -le $cword ]] && cword=$(( cword - 1 ));
        else
            i=$(( ++i ));
        fi;
    done;
    cur=${words[cword]};
    prev=${words[cword - 1]};
    pprev=${words[cword - 2]};
    local object=${words[1]} command=${words[2]};
    if [[ -z $object || $cword -eq 1 ]]; then
        case $cur in 
            *)
                COMPREPLY=($( compgen -W "$( bpftool help 2>&1 |                     command sed                     -e '/OBJECT := /!d'                     -e 's/.*{//'                     -e 's/}.*//'                     -e 's/|//g' )" -- "$cur" ));
                COMPREPLY+=($( compgen -W 'batch help' -- "$cur" ));
                return 0
            ;;
        esac;
    fi;
    [[ $command == help ]] && return 0;
    case $object in 
        prog)
            case $command in 
                show | list | dump | pin)
                    case $prev in 
                        id)
                            _bpftool_get_prog_ids;
                            return 0
                        ;;
                        name)
                            _bpftool_get_prog_names;
                            return 0
                        ;;
                    esac
                ;;
            esac;
            local PROG_TYPE='id pinned tag name';
            local MAP_TYPE='id pinned name';
            local METRIC_TYPE='cycles instructions l1d_loads llc_misses \
                itlb_misses dtlb_misses';
            case $command in 
                show | list)
                    [[ $prev != "$command" ]] && return 0;
                    COMPREPLY=($( compgen -W "$PROG_TYPE" -- "$cur" ));
                    return 0
                ;;
                dump)
                    case $prev in 
                        $command)
                            COMPREPLY+=($( compgen -W "xlated jited" --                                 "$cur" ));
                            return 0
                        ;;
                        xlated | jited)
                            COMPREPLY=($( compgen -W "$PROG_TYPE" --                                 "$cur" ));
                            return 0
                        ;;
                        *)
                            _bpftool_once_attr 'file';
                            if _bpftool_search_list 'xlated'; then
                                COMPREPLY+=($( compgen -W 'opcodes visual linum' --                                     "$cur" ));
                            else
                                COMPREPLY+=($( compgen -W 'opcodes linum' --                                     "$cur" ));
                            fi;
                            return 0
                        ;;
                    esac
                ;;
                pin)
                    if [[ $prev == "$command" ]]; then
                        COMPREPLY=($( compgen -W "$PROG_TYPE" -- "$cur" ));
                    else
                        _filedir;
                    fi;
                    return 0
                ;;
                attach | detach)
                    case $cword in 
                        3)
                            COMPREPLY=($( compgen -W "$PROG_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        4)
                            case $prev in 
                                id)
                                    _bpftool_get_prog_ids
                                ;;
                                name)
                                    _bpftool_get_prog_names
                                ;;
                                pinned)
                                    _filedir
                                ;;
                            esac;
                            return 0
                        ;;
                        5)
                            local BPFTOOL_PROG_ATTACH_TYPES='msg_verdict \
                                skb_verdict stream_verdict stream_parser \
                                flow_dissector';
                            COMPREPLY=($( compgen -W "$BPFTOOL_PROG_ATTACH_TYPES" -- "$cur" ));
                            return 0
                        ;;
                        6)
                            COMPREPLY=($( compgen -W "$MAP_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        7)
                            case $prev in 
                                id)
                                    _bpftool_get_map_ids
                                ;;
                                name)
                                    _bpftool_get_map_names
                                ;;
                                pinned)
                                    _filedir
                                ;;
                            esac;
                            return 0
                        ;;
                    esac
                ;;
                load | loadall)
                    local obj;
                    if [[ ${#words[@]} -eq 3 ]]; then
                        COMPREPLY=($( compgen -W "load loadall" -- "$cur" ));
                        return 0;
                    fi;
                    if [[ ${#words[@]} -lt 6 ]]; then
                        _filedir;
                        return 0;
                    fi;
                    obj=${words[3]};
                    if [[ ${words[-4]} == "map" ]]; then
                        COMPREPLY=($( compgen -W "id pinned" -- "$cur" ));
                        return 0;
                    fi;
                    if [[ ${words[-3]} == "map" ]]; then
                        if [[ ${words[-2]} == "idx" ]]; then
                            _bpftool_get_obj_map_idxs $obj;
                        else
                            if [[ ${words[-2]} == "name" ]]; then
                                _bpftool_get_obj_map_names $obj;
                            fi;
                        fi;
                        return 0;
                    fi;
                    if [[ ${words[-2]} == "map" ]]; then
                        COMPREPLY=($( compgen -W "idx name" -- "$cur" ));
                        return 0;
                    fi;
                    case $prev in 
                        type)
                            local BPFTOOL_PROG_LOAD_TYPES='socket kprobe \
                                kretprobe classifier flow_dissector \
                                action tracepoint raw_tracepoint \
                                xdp perf_event cgroup/skb cgroup/sock \
                                cgroup/dev lwt_in lwt_out lwt_xmit \
                                lwt_seg6local sockops sk_skb sk_msg \
                                lirc_mode2 cgroup/bind4 cgroup/bind6 \
                                cgroup/connect4 cgroup/connect6 \
                                cgroup/getpeername4 cgroup/getpeername6 \
                                cgroup/getsockname4 cgroup/getsockname6 \
                                cgroup/sendmsg4 cgroup/sendmsg6 \
                                cgroup/recvmsg4 cgroup/recvmsg6 \
                                cgroup/post_bind4 cgroup/post_bind6 \
                                cgroup/sysctl cgroup/getsockopt \
                                cgroup/setsockopt cgroup/sock_release struct_ops \
                                fentry fexit freplace sk_lookup';
                            COMPREPLY=($( compgen -W "$BPFTOOL_PROG_LOAD_TYPES" -- "$cur" ));
                            return 0
                        ;;
                        id)
                            _bpftool_get_map_ids;
                            return 0
                        ;;
                        name)
                            _bpftool_get_map_names;
                            return 0
                        ;;
                        pinned | pinmaps)
                            _filedir;
                            return 0
                        ;;
                        *)
                            COMPREPLY=($( compgen -W "map" -- "$cur" ));
                            _bpftool_once_attr 'type';
                            _bpftool_once_attr 'dev';
                            _bpftool_once_attr 'pinmaps';
                            return 0
                        ;;
                    esac
                ;;
                tracelog)
                    return 0
                ;;
                profile)
                    case $cword in 
                        3)
                            COMPREPLY=($( compgen -W "$PROG_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        4)
                            case $prev in 
                                id)
                                    _bpftool_get_prog_ids
                                ;;
                                name)
                                    _bpftool_get_prog_names
                                ;;
                                pinned)
                                    _filedir
                                ;;
                            esac;
                            return 0
                        ;;
                        5)
                            COMPREPLY=($( compgen -W "$METRIC_TYPE duration" -- "$cur" ));
                            return 0
                        ;;
                        6)
                            case $prev in 
                                duration)
                                    return 0
                                ;;
                                *)
                                    COMPREPLY=($( compgen -W "$METRIC_TYPE" -- "$cur" ));
                                    return 0
                                ;;
                            esac;
                            return 0
                        ;;
                        *)
                            COMPREPLY=($( compgen -W "$METRIC_TYPE" -- "$cur" ));
                            return 0
                        ;;
                    esac
                ;;
                run)
                    if [[ ${#words[@]} -eq 4 ]]; then
                        COMPREPLY=($( compgen -W "$PROG_TYPE" -- "$cur" ));
                        return 0;
                    fi;
                    case $prev in 
                        id)
                            _bpftool_get_prog_ids;
                            return 0
                        ;;
                        name)
                            _bpftool_get_prog_names;
                            return 0
                        ;;
                        data_in | data_out | ctx_in | ctx_out)
                            _filedir;
                            return 0
                        ;;
                        repeat | data_size_out | ctx_size_out)
                            return 0
                        ;;
                        *)
                            _bpftool_once_attr 'data_in data_out data_size_out \
                                ctx_in ctx_out ctx_size_out repeat';
                            return 0
                        ;;
                    esac
                ;;
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'dump help pin attach detach \
                            load loadall show list tracelog run profile' -- "$cur" ))
                ;;
            esac
        ;;
        struct_ops)
            local STRUCT_OPS_TYPE='id name';
            case $command in 
                show | list | dump | unregister)
                    case $prev in 
                        $command)
                            COMPREPLY=($( compgen -W "$STRUCT_OPS_TYPE" -- "$cur" ))
                        ;;
                        id)
                            _bpftool_get_map_ids_for_type struct_ops
                        ;;
                        name)
                            _bpftool_get_map_names_for_type struct_ops
                        ;;
                    esac;
                    return 0
                ;;
                register)
                    _filedir;
                    return 0
                ;;
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'register unregister show list dump help'                             -- "$cur" ))
                ;;
            esac
        ;;
        iter)
            case $command in 
                pin)
                    case $prev in 
                        $command)
                            _filedir
                        ;;
                        id)
                            _bpftool_get_map_ids
                        ;;
                        name)
                            _bpftool_get_map_names
                        ;;
                        pinned)
                            _filedir
                        ;;
                        *)
                            _bpftool_one_of_list $MAP_TYPE
                        ;;
                    esac;
                    return 0
                ;;
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'pin help'                             -- "$cur" ))
                ;;
            esac
        ;;
        map)
            local MAP_TYPE='id pinned name';
            case $command in 
                show | list | dump | peek | pop | dequeue | freeze)
                    case $prev in 
                        $command)
                            COMPREPLY=($( compgen -W "$MAP_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        id)
                            case "$command" in 
                                peek)
                                    _bpftool_get_map_ids_for_type stack;
                                    _bpftool_get_map_ids_for_type queue
                                ;;
                                pop)
                                    _bpftool_get_map_ids_for_type stack
                                ;;
                                dequeue)
                                    _bpftool_get_map_ids_for_type queue
                                ;;
                                *)
                                    _bpftool_get_map_ids
                                ;;
                            esac;
                            return 0
                        ;;
                        name)
                            case "$command" in 
                                peek)
                                    _bpftool_get_map_names_for_type stack;
                                    _bpftool_get_map_names_for_type queue
                                ;;
                                pop)
                                    _bpftool_get_map_names_for_type stack
                                ;;
                                dequeue)
                                    _bpftool_get_map_names_for_type queue
                                ;;
                                *)
                                    _bpftool_get_map_names
                                ;;
                            esac;
                            return 0
                        ;;
                        *)
                            return 0
                        ;;
                    esac
                ;;
                create)
                    case $prev in 
                        $command)
                            _filedir;
                            return 0
                        ;;
                        type)
                            local BPFTOOL_MAP_CREATE_TYPES='hash array \
                                prog_array perf_event_array percpu_hash \
                                percpu_array stack_trace cgroup_array lru_hash \
                                lru_percpu_hash lpm_trie array_of_maps \
                                hash_of_maps devmap devmap_hash sockmap cpumap \
                                xskmap sockhash cgroup_storage reuseport_sockarray \
                                percpu_cgroup_storage queue stack sk_storage \
                                struct_ops inode_storage task_storage ringbuf';
                            COMPREPLY=($( compgen -W "$BPFTOOL_MAP_CREATE_TYPES" -- "$cur" ));
                            return 0
                        ;;
                        key | value | flags | entries)
                            return 0
                        ;;
                        inner_map)
                            COMPREPLY=($( compgen -W "$MAP_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        id)
                            _bpftool_get_map_ids
                        ;;
                        name)
                            case $pprev in 
                                inner_map)
                                    _bpftool_get_map_names
                                ;;
                                *)
                                    return 0
                                ;;
                            esac
                        ;;
                        *)
                            _bpftool_once_attr 'type';
                            _bpftool_once_attr 'key';
                            _bpftool_once_attr 'value';
                            _bpftool_once_attr 'entries';
                            _bpftool_once_attr 'name';
                            _bpftool_once_attr 'flags';
                            if _bpftool_search_list 'array_of_maps' 'hash_of_maps'; then
                                _bpftool_once_attr 'inner_map';
                            fi;
                            _bpftool_once_attr 'dev';
                            return 0
                        ;;
                    esac
                ;;
                lookup | getnext | delete)
                    case $prev in 
                        $command)
                            COMPREPLY=($( compgen -W "$MAP_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        id)
                            _bpftool_get_map_ids;
                            return 0
                        ;;
                        name)
                            _bpftool_get_map_names;
                            return 0
                        ;;
                        key)
                            COMPREPLY+=($( compgen -W 'hex' -- "$cur" ))
                        ;;
                        *)
                            case $(_bpftool_map_guess_map_type) in 
                                queue | stack)
                                    return 0
                                ;;
                            esac;
                            _bpftool_once_attr 'key';
                            return 0
                        ;;
                    esac
                ;;
                update | push | enqueue)
                    case $prev in 
                        $command)
                            COMPREPLY=($( compgen -W "$MAP_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        id)
                            _bpftool_map_update_get_id $command;
                            return 0
                        ;;
                        name)
                            _bpftool_map_update_get_name $command;
                            return 0
                        ;;
                        key)
                            COMPREPLY+=($( compgen -W 'hex' -- "$cur" ))
                        ;;
                        value)
                            case "$(_bpftool_map_guess_map_type)" in 
                                array_of_maps | hash_of_maps)
                                    local MAP_TYPE='id pinned name';
                                    COMPREPLY+=($( compgen -W "$MAP_TYPE"                                         -- "$cur" ));
                                    return 0
                                ;;
                                prog_array)
                                    local PROG_TYPE='id pinned tag name';
                                    COMPREPLY+=($( compgen -W "$PROG_TYPE"                                         -- "$cur" ));
                                    return 0
                                ;;
                                *)
                                    COMPREPLY+=($( compgen -W 'hex'                                         -- "$cur" ));
                                    return 0
                                ;;
                            esac;
                            return 0
                        ;;
                        *)
                            case $(_bpftool_map_guess_map_type) in 
                                queue | stack)
                                    _bpftool_once_attr 'value';
                                    return 0
                                ;;
                            esac;
                            _bpftool_once_attr 'key';
                            local UPDATE_FLAGS='any exist noexist';
                            for ((idx=3; idx < ${#words[@]}-1; idx++ ))
                            do
                                if [[ ${words[idx]} == 'value' ]]; then
                                    _bpftool_one_of_list "$UPDATE_FLAGS";
                                    return 0;
                                fi;
                            done;
                            for ((idx=3; idx < ${#words[@]}-1; idx++ ))
                            do
                                if [[ ${words[idx]} == 'key' ]]; then
                                    _bpftool_once_attr 'value';
                                    return 0;
                                fi;
                            done;
                            return 0
                        ;;
                    esac
                ;;
                pin)
                    case $prev in 
                        $command)
                            COMPREPLY=($( compgen -W "$MAP_TYPE" -- "$cur" ))
                        ;;
                        id)
                            _bpftool_get_map_ids
                        ;;
                        name)
                            _bpftool_get_map_names
                        ;;
                    esac;
                    return 0
                ;;
                event_pipe)
                    case $prev in 
                        $command)
                            COMPREPLY=($( compgen -W "$MAP_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        id)
                            _bpftool_get_map_ids_for_type perf_event_array;
                            return 0
                        ;;
                        name)
                            _bpftool_get_map_names_for_type perf_event_array;
                            return 0
                        ;;
                        cpu)
                            return 0
                        ;;
                        index)
                            return 0
                        ;;
                        *)
                            _bpftool_once_attr 'cpu';
                            _bpftool_once_attr 'index';
                            return 0
                        ;;
                    esac
                ;;
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'delete dump getnext help \
                            lookup pin event_pipe show list update create \
                            peek push enqueue pop dequeue freeze' --                             "$cur" ))
                ;;
            esac
        ;;
        btf)
            local PROG_TYPE='id pinned tag name';
            local MAP_TYPE='id pinned name';
            case $command in 
                dump)
                    case $prev in 
                        $command)
                            COMPREPLY+=($( compgen -W "id map prog file" --                                 "$cur" ));
                            return 0
                        ;;
                        prog)
                            COMPREPLY=($( compgen -W "$PROG_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        map)
                            COMPREPLY=($( compgen -W "$MAP_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        id)
                            case $pprev in 
                                prog)
                                    _bpftool_get_prog_ids
                                ;;
                                map)
                                    _bpftool_get_map_ids
                                ;;
                                $command)
                                    _bpftool_get_btf_ids
                                ;;
                            esac;
                            return 0
                        ;;
                        name)
                            case $pprev in 
                                prog)
                                    _bpftool_get_prog_names
                                ;;
                                map)
                                    _bpftool_get_map_names
                                ;;
                            esac;
                            return 0
                        ;;
                        format)
                            COMPREPLY=($( compgen -W "c raw" -- "$cur" ))
                        ;;
                        *)
                            case ${words[3]} in 
                                id | file)
                                    _bpftool_once_attr 'format'
                                ;;
                                map | prog)
                                    if [[ ${words[3]} == "map" ]] && [[ $cword == 6 ]]; then
                                        COMPREPLY+=($( compgen -W "key value kv all" -- "$cur" ));
                                    fi;
                                    _bpftool_once_attr 'format'
                                ;;
                                *)

                                ;;
                            esac;
                            return 0
                        ;;
                    esac
                ;;
                show | list)
                    case $prev in 
                        $command)
                            COMPREPLY+=($( compgen -W "id" -- "$cur" ))
                        ;;
                        id)
                            _bpftool_get_btf_ids
                        ;;
                    esac;
                    return 0
                ;;
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'dump help show list'                             -- "$cur" ))
                ;;
            esac
        ;;
        gen)
            case $command in 
                object)
                    _filedir;
                    return 0
                ;;
                skeleton)
                    case $prev in 
                        $command)
                            _filedir;
                            return 0
                        ;;
                        *)
                            _bpftool_once_attr 'name';
                            return 0
                        ;;
                    esac
                ;;
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'object skeleton help' -- "$cur" ))
                ;;
            esac
        ;;
        cgroup)
            case $command in 
                show | list | tree)
                    case $cword in 
                        3)
                            _filedir
                        ;;
                        4)
                            COMPREPLY=($( compgen -W 'effective' -- "$cur" ))
                        ;;
                    esac;
                    return 0
                ;;
                attach | detach)
                    local BPFTOOL_CGROUP_ATTACH_TYPES='ingress egress \
                        sock_create sock_ops device \
                        bind4 bind6 post_bind4 post_bind6 connect4 connect6 \
                        getpeername4 getpeername6 getsockname4 getsockname6 \
                        sendmsg4 sendmsg6 recvmsg4 recvmsg6 sysctl getsockopt \
                        setsockopt sock_release';
                    local ATTACH_FLAGS='multi override';
                    local PROG_TYPE='id pinned tag name';
                    if [ $prev = $command ]; then
                        _filedir;
                        return 0;
                    else
                        if [[ $BPFTOOL_CGROUP_ATTACH_TYPES =~ $prev ]]; then
                            COMPREPLY=($( compgen -W "$PROG_TYPE" --                                 "$cur" ));
                            return 0;
                        fi;
                    fi;
                    case $prev in 
                        id)
                            _bpftool_get_prog_ids;
                            return 0
                        ;;
                        *)
                            if ! _bpftool_search_list "$BPFTOOL_CGROUP_ATTACH_TYPES"; then
                                COMPREPLY=($( compgen -W                                     "$BPFTOOL_CGROUP_ATTACH_TYPES" -- "$cur" ));
                            else
                                if [[ "$command" == "attach" ]]; then
                                    _bpftool_one_of_list "$ATTACH_FLAGS";
                                fi;
                            fi;
                            return 0
                        ;;
                    esac
                ;;
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'help attach detach \
                            show list tree' -- "$cur" ))
                ;;
            esac
        ;;
        perf)
            case $command in 
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'help \
                            show list' -- "$cur" ))
                ;;
            esac
        ;;
        net)
            local PROG_TYPE='id pinned tag name';
            local ATTACH_TYPES='xdp xdpgeneric xdpdrv xdpoffload';
            case $command in 
                show | list)
                    [[ $prev != "$command" ]] && return 0;
                    COMPREPLY=($( compgen -W 'dev' -- "$cur" ));
                    return 0
                ;;
                attach)
                    case $cword in 
                        3)
                            COMPREPLY=($( compgen -W "$ATTACH_TYPES" -- "$cur" ));
                            return 0
                        ;;
                        4)
                            COMPREPLY=($( compgen -W "$PROG_TYPE" -- "$cur" ));
                            return 0
                        ;;
                        5)
                            case $prev in 
                                id)
                                    _bpftool_get_prog_ids
                                ;;
                                name)
                                    _bpftool_get_prog_names
                                ;;
                                pinned)
                                    _filedir
                                ;;
                            esac;
                            return 0
                        ;;
                        6)
                            COMPREPLY=($( compgen -W 'dev' -- "$cur" ));
                            return 0
                        ;;
                        8)
                            _bpftool_once_attr 'overwrite';
                            return 0
                        ;;
                    esac
                ;;
                detach)
                    case $cword in 
                        3)
                            COMPREPLY=($( compgen -W "$ATTACH_TYPES" -- "$cur" ));
                            return 0
                        ;;
                        4)
                            COMPREPLY=($( compgen -W 'dev' -- "$cur" ));
                            return 0
                        ;;
                    esac
                ;;
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'help \
                            show list attach detach' -- "$cur" ))
                ;;
            esac
        ;;
        feature)
            case $command in 
                probe)
                    [[ $prev == "prefix" ]] && return 0;
                    if _bpftool_search_list 'macros'; then
                        _bpftool_once_attr 'prefix';
                    else
                        COMPREPLY+=($( compgen -W 'macros' -- "$cur" ));
                    fi;
                    _bpftool_one_of_list 'kernel dev';
                    _bpftool_once_attr 'full unprivileged';
                    return 0
                ;;
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'help probe' -- "$cur" ))
                ;;
            esac
        ;;
        link)
            case $command in 
                show | list | pin | detach)
                    case $prev in 
                        id)
                            _bpftool_get_link_ids;
                            return 0
                        ;;
                    esac
                ;;
            esac;
            local LINK_TYPE='id pinned';
            case $command in 
                show | list)
                    [[ $prev != "$command" ]] && return 0;
                    COMPREPLY=($( compgen -W "$LINK_TYPE" -- "$cur" ));
                    return 0
                ;;
                pin | detach)
                    if [[ $prev == "$command" ]]; then
                        COMPREPLY=($( compgen -W "$LINK_TYPE" -- "$cur" ));
                    else
                        _filedir;
                    fi;
                    return 0
                ;;
                *)
                    [[ $prev == $object ]] && COMPREPLY=($( compgen -W 'help pin show list' -- "$cur" ))
                ;;
            esac
        ;;
    esac
}
_bpftool_get_btf_ids () 
{ 
    COMPREPLY+=($( compgen -W "$( bpftool -jp btf 2>&1 |         command sed -n 's/.*"id": \(.*\),$/\1/p' )" -- "$cur" ))
}
_bpftool_get_link_ids () 
{ 
    COMPREPLY+=($( compgen -W "$( bpftool -jp link 2>&1 |         command sed -n 's/.*"id": \(.*\),$/\1/p' )" -- "$cur" ))
}
_bpftool_get_map_ids () 
{ 
    COMPREPLY+=($( compgen -W "$( bpftool -jp map  2>&1 |         command sed -n 's/.*"id": \(.*\),$/\1/p' )" -- "$cur" ))
}
_bpftool_get_map_ids_for_type () 
{ 
    local type="$1";
    COMPREPLY+=($( compgen -W "$( bpftool -jp map  2>&1 |         command grep -C2 "$type" |         command sed -n 's/.*"id": \(.*\),$/\1/p' )" -- "$cur" ))
}
_bpftool_get_map_names () 
{ 
    COMPREPLY+=($( compgen -W "$( bpftool -jp map  2>&1 |         command sed -n 's/.*"name": \(.*\),$/\1/p' )" -- "$cur" ))
}
_bpftool_get_map_names_for_type () 
{ 
    local type="$1";
    COMPREPLY+=($( compgen -W "$( bpftool -jp map  2>&1 |         command grep -C2 "$type" |         command sed -n 's/.*"name": \(.*\),$/\1/p' )" -- "$cur" ))
}
_bpftool_get_obj_map_idxs () 
{ 
    local obj;
    obj=$1;
    nmaps=$(objdump -j maps -t $obj 2>/dev/null | grep -c 'g     . maps');
    COMPREPLY+=($( compgen -W "$(seq 0 $((nmaps - 1)))" -- "$cur" ))
}
_bpftool_get_obj_map_names () 
{ 
    local obj;
    obj=$1;
    maps=$(objdump -j maps -t $obj 2>/dev/null |         command awk '/g     . maps/ {print $NF}');
    COMPREPLY+=($( compgen -W "$maps" -- "$cur" ))
}
_bpftool_get_prog_ids () 
{ 
    COMPREPLY+=($( compgen -W "$( bpftool -jp prog 2>&1 |         command sed -n 's/.*"id": \(.*\),$/\1/p' )" -- "$cur" ))
}
_bpftool_get_prog_names () 
{ 
    COMPREPLY+=($( compgen -W "$( bpftool -jp prog 2>&1 |         command sed -n 's/.*"name": "\(.*\)",$/\1/p' )" -- "$cur" ))
}
_bpftool_get_prog_tags () 
{ 
    COMPREPLY+=($( compgen -W "$( bpftool -jp prog 2>&1 |         command sed -n 's/.*"tag": "\(.*\)",$/\1/p' )" -- "$cur" ))
}
_bpftool_map_guess_map_type () 
{ 
    local keyword ref;
    for ((idx=3; idx < ${#words[@]}-1; idx++ ))
    do
        case "${words[$((idx-2))]}" in 
            lookup | update)
                keyword=${words[$((idx-1))]};
                ref=${words[$((idx))]}
            ;;
            push)
                printf "stack";
                return 0
            ;;
            enqueue)
                printf "queue";
                return 0
            ;;
        esac;
    done;
    [[ -z $ref ]] && return 0;
    local type;
    type=$(bpftool -jp map show $keyword $ref |         command sed -n 's/.*"type": "\(.*\)",$/\1/p');
    [[ -n $type ]] && printf $type
}
_bpftool_map_update_get_id () 
{ 
    local command="$1";
    local idx value;
    for ((idx=7; idx < ${#words[@]}-1; idx++ ))
    do
        if [[ ${words[idx]} == "value" ]]; then
            value=1;
            break;
        fi;
    done;
    if [[ $value -eq 0 ]]; then
        case "$command" in 
            push)
                _bpftool_get_map_ids_for_type stack
            ;;
            enqueue)
                _bpftool_get_map_ids_for_type queue
            ;;
            *)
                _bpftool_get_map_ids
            ;;
        esac;
        return 0;
    fi;
    local type=$(_bpftool_map_guess_map_type);
    case $type in 
        array_of_maps | hash_of_maps)
            _bpftool_get_map_ids;
            return 0
        ;;
        prog_array)
            _bpftool_get_prog_ids;
            return 0
        ;;
        *)
            return 0
        ;;
    esac
}
_bpftool_map_update_get_name () 
{ 
    local command="$1";
    local idx value;
    for ((idx=7; idx < ${#words[@]}-1; idx++ ))
    do
        if [[ ${words[idx]} == "value" ]]; then
            value=1;
            break;
        fi;
    done;
    if [[ $value -eq 0 ]]; then
        case "$command" in 
            push)
                _bpftool_get_map_names_for_type stack
            ;;
            enqueue)
                _bpftool_get_map_names_for_type queue
            ;;
            *)
                _bpftool_get_map_names
            ;;
        esac;
        return 0;
    fi;
    local type=$(_bpftool_map_guess_map_type);
    case $type in 
        array_of_maps | hash_of_maps)
            _bpftool_get_map_names;
            return 0
        ;;
        prog_array)
            _bpftool_get_prog_names;
            return 0
        ;;
        *)
            return 0
        ;;
    esac
}
_bpftool_once_attr () 
{ 
    local w idx found;
    for w in $*;
    do
        found=0;
        for ((idx=3; idx < ${#words[@]}-1; idx++ ))
        do
            if [[ $w == ${words[idx]} ]]; then
                found=1;
                break;
            fi;
        done;
        [[ $found -eq 0 ]] && COMPREPLY+=($( compgen -W "$w" -- "$cur" ));
    done
}
_bpftool_one_of_list () 
{ 
    _bpftool_search_list $* && return 1;
    COMPREPLY+=($( compgen -W "$*" -- "$cur" ))
}
_bpftool_search_list () 
{ 
    local w idx;
    for w in $*;
    do
        for ((idx=3; idx < ${#words[@]}-1; idx++ ))
        do
            [[ $w == ${words[idx]} ]] && return 0;
        done;
    done;
    return 1
}
_cd () 
{ 
    local cur prev words cword;
    _init_completion || return;
    local IFS='
' i j k;
    compopt -o filenames;
    if [[ -z ${CDPATH:-} || $cur == ?(.)?(.)/* ]]; then
        _filedir -d;
        return;
    fi;
    local -r mark_dirs=$(_rl_enabled mark-directories && echo y);
    local -r mark_symdirs=$(_rl_enabled mark-symlinked-directories && echo y);
    for i in ${CDPATH//:/'
'};
    do
        k="${#COMPREPLY[@]}";
        for j in $(compgen -d -- $i/$cur);
        do
            if [[ ( -n $mark_symdirs && -L $j || -n $mark_dirs && ! -L $j ) && ! -d ${j#$i/} ]]; then
                j+="/";
            fi;
            COMPREPLY[k++]=${j#$i/};
        done;
    done;
    _filedir -d;
    if ((${#COMPREPLY[@]} == 1)); then
        i=${COMPREPLY[0]};
        if [[ $i == "$cur" && $i != "*/" ]]; then
            COMPREPLY[0]="${i}/";
        fi;
    fi;
    return
}
_cd_devices () 
{ 
    COMPREPLY+=($(compgen -f -d -X "!*/?([amrs])cd*" -- "${cur:-/dev/}"))
}
_changeShortCutsOnCmd () 
{ 
    local cmdLine="$1";
    cmdLines=($(compgen -W "$cmdLine" ));
    for line in ${cmdLines[@]};
    do
        if [[ $( _isWordslistContainsWord "$( _getShortCutsListFromHash )" "$line" ) -eq 1 ]]; then
            shortCutsVal="$( _getSonFromShortCutsFromHash "$line" )";
            if [[ $shortCutsVal != "" ]]; then
                cmdLine=$( echo $cmdLine | sed "s/$line/$shortCutsVal/g" );
            fi;
        fi;
    done;
    echo "$cmdLine"
}
_code () 
{ 
    local cur prev words cword split;
    _init_completion -s || return;
    _expand || return;
    case $prev in 
        -d | --diff)
            _filedir;
            return
        ;;
        -a | --add | --user-data-dir | --extensions-dir)
            _filedir -d;
            return
        ;;
        -g | --goto)
            compopt -o nospace;
            _filedir;
            return
        ;;
        --locale)
            COMPREPLY=($( compgen -W 'de en en-US es fr it ja ko ru zh-CN zh-TW bg hu pt-br tr' ));
            return
        ;;
        --install-extension | --uninstall-extension)
            _filedir vsix;
            return
        ;;
        --log)
            COMPREPLY=($( compgen -W 'critical error warn info debug trace off' ));
            return
        ;;
        --folder-uri | --disable-extension | --max-memory)
            return 0
        ;;
        --enable-proposed-api)

        ;;
    esac;
    $split && return;
    if [[ $cur == -* ]]; then
        COMPREPLY=($( compgen -W '-d --diff --folder-uri -a --add -g
			--goto -n --new-window -r --reuse-window -w --wait --locale=
			--user-data-dir -v --version -h --help --extensions-dir
			--list-extensions --show-versions --install-extension
			--uninstall-extension --enable-proposed-api --verbose --log -s
			--status -p --performance --prof-startup --disable-extensions
			--disable-extension --inspect-extensions
			--inspect-brk-extensions --disable-gpu
			--max-memory=' -- "$cur"));
        [[ $COMPREPLY == *= ]] && compopt -o nospace;
        return;
    fi;
    _filedir
}
_command () 
{ 
    local offset i;
    offset=1;
    for ((i = 1; i <= COMP_CWORD; i++))
    do
        if [[ ${COMP_WORDS[i]} != -* ]]; then
            offset=$i;
            break;
        fi;
    done;
    _command_offset $offset
}
_command_offset () 
{ 
    local word_offset=$1 i j;
    for ((i = 0; i < word_offset; i++))
    do
        for ((j = 0; j <= ${#COMP_LINE}; j++))
        do
            [[ $COMP_LINE == "${COMP_WORDS[i]}"* ]] && break;
            COMP_LINE=${COMP_LINE:1};
            ((COMP_POINT--));
        done;
        COMP_LINE=${COMP_LINE#"${COMP_WORDS[i]}"};
        ((COMP_POINT -= ${#COMP_WORDS[i]}));
    done;
    for ((i = 0; i <= COMP_CWORD - word_offset; i++))
    do
        COMP_WORDS[i]=${COMP_WORDS[i + word_offset]};
    done;
    for ((i; i <= COMP_CWORD; i++))
    do
        unset 'COMP_WORDS[i]';
    done;
    ((COMP_CWORD -= word_offset));
    COMPREPLY=();
    local cur;
    _get_comp_words_by_ref cur;
    if ((COMP_CWORD == 0)); then
        local IFS='
';
        compopt -o filenames;
        COMPREPLY=($(compgen -d -c -- "$cur"));
    else
        local cmd=${COMP_WORDS[0]} compcmd=${COMP_WORDS[0]};
        local cspec=$(complete -p $cmd 2>/dev/null);
        if [[ ! -n $cspec && $cmd == */* ]]; then
            cspec=$(complete -p ${cmd##*/} 2>/dev/null);
            [[ -n $cspec ]] && compcmd=${cmd##*/};
        fi;
        if [[ ! -n $cspec ]]; then
            compcmd=${cmd##*/};
            _completion_loader $compcmd;
            cspec=$(complete -p $compcmd 2>/dev/null);
        fi;
        if [[ -n $cspec ]]; then
            if [[ ${cspec#* -F } != "$cspec" ]]; then
                local func=${cspec#*-F };
                func=${func%% *};
                if ((${#COMP_WORDS[@]} >= 2)); then
                    $func $cmd "${COMP_WORDS[-1]}" "${COMP_WORDS[-2]}";
                else
                    $func $cmd "${COMP_WORDS[-1]}";
                fi;
                local opt;
                while [[ $cspec == *" -o "* ]]; do
                    cspec=${cspec#*-o };
                    opt=${cspec%% *};
                    compopt -o $opt;
                    cspec=${cspec#$opt};
                done;
            else
                cspec=${cspec#complete};
                cspec=${cspec%%$compcmd};
                COMPREPLY=($(eval compgen "$cspec" -- '$cur'));
            fi;
        else
            if ((${#COMPREPLY[@]} == 0)); then
                _minimal;
            fi;
        fi;
    fi
}
_comp_iprconfig () 
{ 
    iprconfig="${COMP_WORDS[0]}";
    cur="${COMP_WORDS[COMP_CWORD]}";
    prev="${COMP_WORDS[COMP_CWORD-1]}";
    case "${prev}" in 
        "-c")
            opts=$(${iprconfig} -l 2>/dev/null);
            COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        ;;
        "-k")
            COMPREPLY=($(compgen -o dirnames -- ${cur}))
        ;;
        *)
            opts=$(find /dev -printf "%f\n" | grep -G "^\(sd\|sg\)");
            COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        ;;
    esac;
    return 0
}
_complete_as_root () 
{ 
    [[ $EUID -eq 0 || -n ${root_command:-} ]]
}
_completion_loader () 
{ 
    local cmd="${1:-_EmptycmD_}";
    __load_completion "$cmd" && return 124;
    complete -F _minimal -- "$cmd" && return 124
}
_configured_interfaces () 
{ 
    if [[ -f /etc/debian_version ]]; then
        COMPREPLY=($(compgen -W "$(command sed -ne 's|^iface \([^ ]\{1,\}\).*$|\1|p'             /etc/network/interfaces /etc/network/interfaces.d/* 2>/dev/null)"             -- "$cur"));
    else
        if [[ -f /etc/SuSE-release ]]; then
            COMPREPLY=($(compgen -W "$(printf '%s\n'             /etc/sysconfig/network/ifcfg-* |
            command sed -ne 's|.*ifcfg-\([^*].*\)$|\1|p')" -- "$cur"));
        else
            if [[ -f /etc/pld-release ]]; then
                COMPREPLY=($(compgen -W "$(command ls -B             /etc/sysconfig/interfaces |
            command sed -ne 's|.*ifcfg-\([^*].*\)$|\1|p')" -- "$cur"));
            else
                COMPREPLY=($(compgen -W "$(printf '%s\n'             /etc/sysconfig/network-scripts/ifcfg-* |
            command sed -ne 's|.*ifcfg-\([^*].*\)$|\1|p')" -- "$cur"));
            fi;
        fi;
    fi
}
_count_args () 
{ 
    local i cword words;
    __reassemble_comp_words_by_ref "${1-}" words cword;
    args=1;
    for ((i = 1; i < cword; i++))
    do
        if [[ ${words[i]} != -* && ${words[i - 1]} != ${2-} || ${words[i]} == ${3-} ]]; then
            ((args++));
        fi;
    done
}
_cvmfs_config () 
{ 
    local cur prev opts;
    COMPREPLY=();
    cur="${COMP_WORDS[COMP_CWORD]}";
    prev="${COMP_WORDS[COMP_CWORD-1]}";
    local -r cmds="setup chksetup showconfig stat status probe reload umount bugreport";
    case "${prev}" in 
        setup)
            COMPREPLY=($(compgen -W "nouser nocfgmod" ${cur}));
            return 0
        ;;
        showconfig)
            COMPREPLY=($(compgen -W "$(__local_repos)" ${cur}));
            return 0
        ;;
        stat)
            case "${cur}" in 
                -*)
                    COMPREPLY=($(compgen -W "-v" ${cur}));
                    return 0
                ;;
                *)
                    COMPREPLY=($(compgen -W "$(__local_repos)" ${cur} ));
                    return 0
                ;;
            esac
        ;;
        reload)
            case "${cur}" in 
                -*)
                    COMPREPLY=($(compgen -W "-c" ${cur}));
                    return 0
                ;;
                *)
                    COMPREPLY=($(compgen -W "$(__local_repos)" ${cur}));
                    return 0
                ;;
            esac
        ;;
    esac;
    COMPREPLY=($(compgen -W "${cmds}" -- ${cur}));
    return 0
}
_cvmfs_server () 
{ 
    local cur cmd;
    COMPREPLY=();
    cur="${COMP_WORDS[COMP_CWORD]}";
    prev_idx=$(( $COMP_CWORD - 1));
    prev="${COMP_WORDS[$prev_idx]}";
    cmd="${COMP_WORDS[1]}";
    local -r cmds="mkfs add-replica import publish rollback rmfs     resign list info tag check transaction abort snapshot migrate     list-catalogs update-info update-repoinfo mount";
    if [ $COMP_CWORD -le 1 ]; then
        COMPREPLY=($(compgen -W "${cmds}" -- ${cur}));
        return 0;
    fi;
    case "${cmd}" in 
        publish)
            COMPREPLY=($(compgen -W "$(__hosted_repos '/stratum0/ && /transaction/')" ${cur}));
            return 0
        ;;
        abort)
            COMPREPLY=($(compgen -W "$(__hosted_repos '/stratum0/ && /transaction/')" ${cur}));
            return 0
        ;;
        rollback)
            COMPREPLY=($(compgen -W "$(__hosted_repos '/stratum0/')" ${cur}));
            return 0
        ;;
        resign)
            COMPREPLY=($(compgen -W "$(__hosted_repos '/stratum0/')" ${cur}));
            return 0
        ;;
        tag)
            case "$prev" in 
                -a | -r | -i)
                    COMPREPLY=($(compgen -W "$(__tags)" ${cur}))
                ;;
                *)
                    COMPREPLY=($(compgen -W "$(__hosted_repos '/stratum0/')" ${cur}));
                    return 0
                ;;
            esac
        ;;
        transaction)
            COMPREPLY=($(compgen -W "$(__hosted_repos '/stratum0/ && !/transaction/')" ${cur}));
            return 0
        ;;
        migrate)
            COMPREPLY=($(compgen -W "$(__hosted_repos '/INCOMPATIBLE/')" ${cur}));
            return 0
        ;;
        snapshot)
            COMPREPLY=($(compgen -W "$(__hosted_repos '/stratum1/')" ${cur}));
            return 0
        ;;
        rmfs)
            COMPREPLY=($(compgen -W "$(__hosted_repos)" ${cur}));
            return 0
        ;;
        alterfs)
            COMPREPLY=($(compgen -W "$(__hosted_repos)" ${cur}));
            return 0
        ;;
        info)
            COMPREPLY=($(compgen -W "$(__hosted_repos)" ${cur}));
            return 0
        ;;
        list-catalogs)
            COMPREPLY=($(compgen -W "$(__hosted_repos)" ${cur}));
            return 0
        ;;
        check)
            COMPREPLY=($(compgen -W "$(__hosted_repos)" ${cur}));
            return 0
        ;;
        gc)
            COMPREPLY=($(compgen -W "$(__hosted_repos)" ${cur}));
            return 0
        ;;
        update-repoinfo)
            COMPREPLY=($(compgen -W "$(__hosted_repos '/stratum0/')" ${cur}));
            return 0
        ;;
        mount)
            COMPREPLY=($(compgen -W "$(__hosted_repos '/stratum0/')" ${cur}));
            return 0
        ;;
    esac
}
_deleteSpeedsFromCur () 
{ 
    local cur="$1";
    speedsList=($(compgen -W "$2" ));
    found=0;
    subOfOtherSpeed=0;
    for speed in ${speedsList[@]};
    do
        if [[ $speed == $cur ]]; then
            found=1;
        else
            if [[ $speed == *"$cur"* ]]; then
                subOfOtherSpeed=1;
            fi;
        fi;
    done;
    if [[ $found == 1 ]] && [[ $subOfOtherSpeed == 0 ]]; then
        cur="";
    fi;
    if [[ $found == 0 ]] && [[ $subOfOtherSpeed == 0 ]]; then
        for speed in ${speedsList[@]};
        do
            cur=$( echo $cur | sed "s/$speed//g" );
        done;
    fi;
    echo $cur
}
_devlist () 
{ 
    local list;
    list=$(mst status -v | grep \/dev | awk -F' ' '{print $2}');
    if [[ -n "$list" ]]; then
        mst status -v | grep \/dev | awk -F' ' '{print $2}';
    else
        mst status -v | grep : | awk -F' ' '{print $3}';
    fi
}
_devmon () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n devmon -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_dvd_devices () 
{ 
    COMPREPLY+=($(compgen -f -d -X "!*/?(r)dvd*" -- "${cur:-/dev/}"))
}
_expand () 
{ 
    case ${cur-} in 
        ~*/*)
            __expand_tilde_by_ref cur
        ;;
        ~*)
            _tilde "$cur" || eval COMPREPLY[0]="$(printf ~%q "${COMPREPLY[0]#\~}")";
            return ${#COMPREPLY[@]}
        ;;
    esac
}
_filedir () 
{ 
    local IFS='
';
    _tilde "${cur-}" || return;
    local -a toks;
    local reset arg=${1-};
    if [[ $arg == -d ]]; then
        reset=$(shopt -po noglob);
        set -o noglob;
        toks=($(compgen -d -- "${cur-}"));
        IFS=' ';
        $reset;
        IFS='
';
    else
        local quoted;
        _quote_readline_by_ref "${cur-}" quoted;
        local xspec=${arg:+"!*.@($arg|${arg^^})"} plusdirs=();
        local opts=(-f -X "$xspec");
        [[ -n $xspec ]] && plusdirs=(-o plusdirs);
        [[ -n ${COMP_FILEDIR_FALLBACK-} || -z ${plusdirs-} ]] || opts+=("${plusdirs[@]}");
        reset=$(shopt -po noglob);
        set -o noglob;
        toks+=($(compgen "${opts[@]}" -- $quoted));
        IFS=' ';
        $reset;
        IFS='
';
        [[ -n ${COMP_FILEDIR_FALLBACK-} && -n $arg && ${#toks[@]} -lt 1 ]] && { 
            reset=$(shopt -po noglob);
            set -o noglob;
            toks+=($(compgen -f ${plusdirs+"${plusdirs[@]}"} -- $quoted));
            IFS=' ';
            $reset;
            IFS='
'
        };
    fi;
    if ((${#toks[@]} != 0)); then
        compopt -o filenames 2> /dev/null;
        COMPREPLY+=("${toks[@]}");
    fi
}
_filedir_xspec () 
{ 
    local cur prev words cword;
    _init_completion || return;
    _tilde "$cur" || return;
    local IFS='
' xspec=${_xspecs[${1##*/}]} tmp;
    local -a toks;
    toks=($(
        compgen -d -- "$(quote_readline "$cur")" | {
            while read -r tmp; do
                printf '%s\n' $tmp
            done
        }
    ));
    eval xspec="${xspec}";
    local matchop=!;
    if [[ $xspec == !* ]]; then
        xspec=${xspec#!};
        matchop=@;
    fi;
    xspec="$matchop($xspec|${xspec^^})";
    toks+=($(
        eval compgen -f -X "'!$xspec'" -- '$(quote_readline "$cur")' | {
            while read -r tmp; do
                [[ -n $tmp ]] && printf '%s\n' $tmp
            done
        }
    ));
    [[ -n ${COMP_FILEDIR_FALLBACK:-} && ${#toks[@]} -lt 1 ]] && { 
        local reset=$(shopt -po noglob);
        set -o noglob;
        toks+=($(compgen -f -- "$(quote_readline "$cur")"));
        IFS=' ';
        $reset;
        IFS='
'
    };
    if ((${#toks[@]} != 0)); then
        compopt -o filenames;
        COMPREPLY=("${toks[@]}");
    fi
}
_flint () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n flint -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_fstypes () 
{ 
    local fss;
    if [[ -e /proc/filesystems ]]; then
        fss="$(cut -d'	' -f2 /proc/filesystems)
             $(awk '! /\*/ { print $NF }' /etc/filesystems 2>/dev/null)";
    else
        fss="$(awk '/^[ \t]*[^#]/ { print $3 }' /etc/fstab 2>/dev/null)
             $(awk '/^[ \t]*[^#]/ { print $3 }' /etc/mnttab 2>/dev/null)
             $(awk '/^[ \t]*[^#]/ { print $4 }' /etc/vfstab 2>/dev/null)
             $(awk '{ print $1 }' /etc/dfs/fstypes 2>/dev/null)
             $([[ -d /etc/fs ]] && command ls /etc/fs)";
    fi;
    [[ -n $fss ]] && COMPREPLY+=($(compgen -W "$fss" -- "$cur"))
}
_getCmdLineUpToIndex () 
{ 
    index=$1;
    len=${#COMP_WORDS[@]};
    nodeWordIndex=$(( len - index ));
    echo "${COMP_WORDS[@]:$nodeWordIndex}"
}
_getCompreplyVal () 
{ 
    sonsList="$1";
    cur="$2";
    nodeType=$3;
    prev="$4";
    index=$5;
    isUpperCaseNeed=$( _getUpperNeedFromHash $prev );
    local extraSons="$( _getExtraFromHash $prev )";
    local compreplyVal="";
    extraSonsList=($extraSons);
    extraSonsLen=${#extraSonsList[@]};
    local lastCommandIndex=$( _getLastCommandIndexFromHash $prev );
    if [[ isUpperCaseNeed -eq 1 ]] && [[ $( _isLastCommand $index $(( lastCommandIndex + 1 )) ) -eq 1 ]]; then
        compreplyVal="$(compgen -W "$sonsList" -- $(echo ${cur} | awk '{print toupper($0)}') )";
    else
        compreplyVal="$(compgen -W "$sonsList" -- ${cur} )";
    fi;
    compreplyValList=($compreplyVal);
    if [[ nodeType -eq 4 ]] && [[ $( _getLastCharOfString $cur ) != "," ]]; then
        compreplyVal="$( _getFourTypeOneValComplite "$compreplyVal" "$extraSons" "$sonsList")";
    fi;
    if [[ $sonsList != "StringVal" ]]; then
        if [[ $sonsList != "StringValSpace" ]]; then
            COMPREPLY=($compreplyVal);
        else
            COMPREPLY=("${COMP_WORDS[COMP_CWORD]}"" ");
        fi;
    else
        if [[ extraSonsLen -eq 1 ]]; then
            COMPREPLY=("$( _getCurrentWhitoutLastVal  "$cur" ) $extraSons ");
        else
            COMPREPLY=("$( _getCurrentWhitoutLastVal  "$cur" ) $cur");
        fi;
    fi
}
_getCurrent () 
{ 
    prev=$1;
    nodeType=$2;
    cur="${COMP_WORDS[COMP_CWORD]}";
    if [[ nodeType -eq 4 ]]; then
        cur=$( _getCurrentTypeFour $prev $nodeType $cur );
    fi;
    echo "$cur"
}
_getCurrentTypeFour () 
{ 
    prev=$1;
    nodeType=$2;
    cur="$3";
    sonsList="$( _getSonsFromHash $prev )";
    if [[ $( _getLastCharOfString $cur ) == "," ]]; then
        cur="";
    else
        cur="$( _getLastStringElemnentOnDelimeter "$cur" "," )";
    fi;
    cur=$( _deleteSpeedsFromCur "$cur" "$sonsList"  );
    echo "$cur"
}
_getCurrentWhitoutLastVal () 
{ 
    lastVal=$1;
    cur="${COMP_WORDS[COMP_CWORD]}";
    echo $cur | sed "s/$lastVal//g"
}
_getDataFromHash () 
{ 
    hashNodeStr=$1;
    hashNodeDataCommand=$2;
    keyCommand=$3;
    hashNodeStr=$( echo $hashNodeStr | sed  's/[-]*//g' );
    hashCommand=$keyCommand"$hashNodeStr[$hashNodeDataCommand]";
    hashCommand="echo "'$'"{$hashCommand}";
    eval $hashCommand
}
_getDelimiterFromHash () 
{ 
    _getDataFromHash $1 "delimiter" ''
}
_getDistanceFromCmdEnd () 
{ 
    len=${#COMP_WORDS[@]};
    index=$1;
    echo $(( len - index ))
}
_getExtraFromHash () 
{ 
    _getDataFromHash $1 "extra" ''
}
_getFourTypeOneValComplite () 
{ 
    compreplyVal=$1;
    if [[ -n $( _isWordslistContainsWord "$( _getSonsFromHash $prev )" "$compreplyVal" ) ]]; then
        prefix="$( _getLastTypeFourValues $cur)";
        compreplyVal=$( echo "$compreplyVal" | sed "s/[^ ]* */$prefix&/g" );
    else
        compreplyVal=" $compreplyVal";
    fi;
    if [[ $(_isWordslistContainsWord "$( _getSonsFromHash $prev )" $cur ) == 1 ]]; then
        compreplyVal="$compreplyVal "$cur", "$extraSons;
    fi;
    echo $compreplyVal
}
_getFullNodeIfShortcut () 
{ 
    local prev="$1";
    shortsList="$( _getShortCutsListFromHash )";
    if [[ $( _isWordslistContainsWord "$shortsList" "$prev" ) -eq 1 ]]; then
        prev="$( _getSonFromShortCutsFromHash "$prev" )";
    fi;
    echo "$prev"
}
_getLastCharOfString () 
{ 
    str=$1;
    echo "${str: -1}"
}
_getLastCommandIndexFromHash () 
{ 
    _getDataFromHash $1 "lastCommandIndex" ''
}
_getLastStringElemnentOnDelimeter () 
{ 
    str=$1;
    delimiter=$2;
    if [[ $str == "" ]]; then
        echo $str;
    else
        strList=($( _splitStringOnDelimiter $str $delimiter ));
        echo ${strList[-1]};
    fi
}
_getLastTypeFourValues () 
{ 
    if [[ $cur == "" ]]; then
        echo "";
    else
        currentVal="${COMP_WORDS[COMP_CWORD]}";
        str=$1;
        curLength=${#str};
        currValLen=${#currentVal};
        curLength=$(( currValLen - curLength ));
        echo "${currentVal: 0 : $curLength}";
    fi
}
_getLenForStringVal () 
{ 
    str="$1";
    prev="$2";
    [[ $str == "StringVal" ]] && echo $( _getLenOfListFromString "$(  _getExtraFromHash $prev )" ) || echo -1
}
_getLenOfListFromString () 
{ 
    strList=$1;
    strListAsList=($ strList);
    echo ${#strListAsList[@]}
}
_getListOneWithoutListTwo () 
{ 
    list1="$1";
    list2="$2";
    ret="";
    if [[ $list1 != "" ]]; then
        ret=$( _getListOneWithoutListTwoCommand "$list1" "$list2" );
    fi;
    echo "$ret"
}
_getListOneWithoutListTwoCommand () 
{ 
    list1="$(  _sortString "$1" )";
    list2="$(  _sortString "$2" )";
    comm -23 <(compgen -W "$list1" ) <(compgen -W "$list2" )
}
_getNodeTypeIfExist () 
{ 
    local prev=$1;
    local nodeType=-1;
    if [[ $nodes == *"$prev"* ]]; then
        nodeType=$( _getNumOfValFromHash $prev );
    fi;
    echo $nodeType
}
_getNumOfValFromHash () 
{ 
    _getDataFromHash $1 "nodeType" ''
}
_getShortCutsListFromHash () 
{ 
    _getDataFromHash shortcuts "@" '!'
}
_getSonFromShortCutsFromHash () 
{ 
    _getDataFromHash shortcuts "$1" ''
}
_getSonsFromHash () 
{ 
    _getDataFromHash $1 "sons" ''
}
_getSonsFromTypeFour () 
{ 
    local cur="${COMP_WORDS[COMP_CWORD]}";
    local sonsList="$1";
    local prev="$2";
    local lastVal="$3";
    local speedShown="";
    local extraSons="$( _getExtraFromHash $prev )";
    if [[ $( _isLastValPartOfSons "$sonsList" "$lastVal" "$prev" ) -eq 0 ]]; then
        sonsList="StringVal";
    else
        if [[ $( _isWordslistContainsWord "$sonsList" "$( _getLastStringElemnentOnDelimeter "$cur" "," )" ) -eq 1 ]] && [[ $( _getLastCharOfString $cur ) != "," ]]; then
            if [[ $extraSons == "" ]]; then
                if [[ "$( _removeShownSpeeds "$sonsList"  )" == "" ]]; then
                    sonsList="StringValSpace";
                else
                    sonsList=",";
                fi;
            else
                tempCur=$( _getCurrent $prev 4 );
                if [[ $tempCur == "" ]]; then
                    sonsList=$( _addDelimiterToStringList "$sonsList" "," );
                    sonsList="$sonsList ""$extraSons";
                else
                    sonsList="$sonsList ""$extraSons";
                fi;
            fi;
        else
            if [[ $( _isWordslistContainsWord "${COMP_WORDS[@]}" "," ) -eq 1 ]]; then
                sonsList="$sonsList ""$extraSons";
            fi;
        fi;
    fi;
    speedShown="$( _splitStringOnDelimiter "$cur" "," )";
    speedShown="$speedShown $( _addDelimiterToStringList "$speedShown" "," )";
    sonsList="$(  _getListOneWithoutListTwo "$sonsList" "$speedShown" )";
    echo "$sonsList"
}
_getSonsList () 
{ 
    local index=$1;
    local prev="$2";
    nodeType=$3;
    lastVal=$4;
    local speedShown="";
    local sonsList="";
    if [[ nodeType -eq -1 ]]; then
        return;
    fi;
    local lastCommandIndex=$( _getLastCommandIndexFromHash $prev );
    if [[ $( _isLastCommand $index $lastCommandIndex ) -ne 1 ]]; then
        sonsList="$( _getExtraFromHash $prev )";
        _setUpperNeededToHash $prev 0;
        echo "$( _removeShownCommandFromSons $index "$sonsList" )";
        return;
    fi;
    sonsList="$( _getSonsFromHash $prev )";
    if [[ nodeType -eq 4 ]]; then
        sonsList="$( _getSonsFromTypeFour "$sonsList" "$prev" "$lastVal" )";
    fi;
    if [[ nodeType -eq 2 ]]; then
        sonsList="$( _devlist )";
    fi;
    echo "$( _removeShownCommandFromSons $index "$sonsList" )"
}
_getUpperNeedFromHash () 
{ 
    _getDataFromHash $1 "upperNeed" ''
}
_get_comp_words_by_ref () 
{ 
    local exclude flag i OPTIND=1;
    local cur cword words=();
    local upargs=() upvars=() vcur vcword vprev vwords;
    while getopts "c:i:n:p:w:" flag "$@"; do
        case $flag in 
            c)
                vcur=$OPTARG
            ;;
            i)
                vcword=$OPTARG
            ;;
            n)
                exclude=$OPTARG
            ;;
            p)
                vprev=$OPTARG
            ;;
            w)
                vwords=$OPTARG
            ;;
            *)
                echo "bash_completion: $FUNCNAME: usage error" 1>&2;
                return 1
            ;;
        esac;
    done;
    while [[ $# -ge $OPTIND ]]; do
        case ${!OPTIND} in 
            cur)
                vcur=cur
            ;;
            prev)
                vprev=prev
            ;;
            cword)
                vcword=cword
            ;;
            words)
                vwords=words
            ;;
            *)
                echo "bash_completion: $FUNCNAME: \`${!OPTIND}':" "unknown argument" 1>&2;
                return 1
            ;;
        esac;
        ((OPTIND += 1));
    done;
    __get_cword_at_cursor_by_ref "${exclude-}" words cword cur;
    [[ -v vcur ]] && { 
        upvars+=("$vcur");
        upargs+=(-v $vcur "$cur")
    };
    [[ -v vcword ]] && { 
        upvars+=("$vcword");
        upargs+=(-v $vcword "$cword")
    };
    [[ -v vprev && $cword -ge 1 ]] && { 
        upvars+=("$vprev");
        upargs+=(-v $vprev "${words[cword - 1]}")
    };
    [[ -v vwords ]] && { 
        upvars+=("$vwords");
        upargs+=(-a${#words[@]} $vwords ${words+"${words[@]}"})
    };
    ((${#upvars[@]})) && local "${upvars[@]}" && _upvars "${upargs[@]}"
}
_get_cword () 
{ 
    local LC_CTYPE=C;
    local cword words;
    __reassemble_comp_words_by_ref "${1-}" words cword;
    if [[ -n ${2-} && -n ${2//[^0-9]/} ]]; then
        printf "%s" "${words[cword - $2]}";
    else
        if ((${#words[cword]} == 0 && COMP_POINT == ${#COMP_LINE})); then
            :;
        else
            local i;
            local cur="$COMP_LINE";
            local index="$COMP_POINT";
            for ((i = 0; i <= cword; ++i))
            do
                while [[ ${#cur} -ge ${#words[i]} && ${cur:0:${#words[i]}} != "${words[i]}" ]]; do
                    cur="${cur:1}";
                    ((index > 0)) && ((index--));
                done;
                if ((i < cword)); then
                    local old_size="${#cur}";
                    cur="${cur#${words[i]}}";
                    local new_size="${#cur}";
                    ((index -= old_size - new_size));
                fi;
            done;
            if [[ ${words[cword]:0:${#cur}} != "$cur" ]]; then
                printf "%s" "${words[cword]}";
            else
                printf "%s" "${cur:0:index}";
            fi;
        fi;
    fi
}
_get_first_arg () 
{ 
    local i;
    arg=;
    for ((i = 1; i < COMP_CWORD; i++))
    do
        if [[ ${COMP_WORDS[i]} != -* ]]; then
            arg=${COMP_WORDS[i]};
            break;
        fi;
    done
}
_get_pword () 
{ 
    if ((COMP_CWORD >= 1)); then
        _get_cword "${@:-}" 1;
    fi
}
_gids () 
{ 
    if type getent &> /dev/null; then
        COMPREPLY=($(compgen -W '$(getent group | cut -d: -f3)' -- "$cur"));
    else
        if type perl &> /dev/null; then
            COMPREPLY=($(compgen -W '$(perl -e '"'"'while (($gid) = (getgrent)[2]) { print $gid . "\n" }'"'"')' -- "$cur"));
        else
            COMPREPLY=($(compgen -W '$(cut -d: -f3 /etc/group)' -- "$cur"));
        fi;
    fi
}
_have () 
{ 
    PATH=$PATH:/usr/sbin:/sbin:/usr/local/sbin type $1 &> /dev/null
}
_included_ssh_config_files () 
{ 
    (($# < 1)) && echo "bash_completion: $FUNCNAME: missing mandatory argument CONFIG" 1>&2;
    local configfile i f;
    configfile=$1;
    local reset=$(shopt -po noglob);
    set -o noglob;
    local included=($(command sed -ne 's/^[[:blank:]]*[Ii][Nn][Cc][Ll][Uu][Dd][Ee][[:blank:]]\(.*\)$/\1/p' "${configfile}"));
    $reset;
    [[ -n ${included-} ]] || return;
    for i in "${included[@]}";
    do
        if ! [[ $i =~ ^\~.*|^\/.* ]]; then
            if [[ $configfile =~ ^\/etc\/ssh.* ]]; then
                i="/etc/ssh/$i";
            else
                i="$HOME/.ssh/$i";
            fi;
        fi;
        __expand_tilde_by_ref i;
        set +o noglob;
        for f in $i;
        do
            if [[ -r $f ]]; then
                config+=("$f");
                _included_ssh_config_files $f;
            fi;
        done;
        $reset;
    done
}
_init_completion () 
{ 
    local exclude="" flag outx errx inx OPTIND=1;
    while getopts "n:e:o:i:s" flag "$@"; do
        case $flag in 
            n)
                exclude+=$OPTARG
            ;;
            e)
                errx=$OPTARG
            ;;
            o)
                outx=$OPTARG
            ;;
            i)
                inx=$OPTARG
            ;;
            s)
                split=false;
                exclude+==
            ;;
            *)
                echo "bash_completion: $FUNCNAME: usage error" 1>&2;
                return 1
            ;;
        esac;
    done;
    COMPREPLY=();
    local redir="@(?([0-9])<|?([0-9&])>?(>)|>&)";
    _get_comp_words_by_ref -n "$exclude<>&" cur prev words cword;
    _variables && return 1;
    if [[ $cur == $redir* || ${prev-} == $redir ]]; then
        local xspec;
        case $cur in 
            2'>'*)
                xspec=${errx-}
            ;;
            *'>'*)
                xspec=${outx-}
            ;;
            *'<'*)
                xspec=${inx-}
            ;;
            *)
                case $prev in 
                    2'>'*)
                        xspec=${errx-}
                    ;;
                    *'>'*)
                        xspec=${outx-}
                    ;;
                    *'<'*)
                        xspec=${inx-}
                    ;;
                esac
            ;;
        esac;
        cur="${cur##$redir}";
        _filedir $xspec;
        return 1;
    fi;
    local i skip;
    for ((i = 1; i < ${#words[@]}; 1))
    do
        if [[ ${words[i]} == $redir* ]]; then
            [[ ${words[i]} == $redir ]] && skip=2 || skip=1;
            words=("${words[@]:0:i}" "${words[@]:i+skip}");
            ((i <= cword)) && ((cword -= skip));
        else
            ((i++));
        fi;
    done;
    ((cword <= 0)) && return 1;
    prev=${words[cword - 1]};
    [[ -n ${split-} ]] && _split_longopt && split=true;
    return 0
}
_installed_modules () 
{ 
    COMPREPLY=($(compgen -W "$(PATH="$PATH:/sbin" lsmod |
        awk '{if (NR != 1) print $1}')" -- "$1"))
}
_ip_addresses () 
{ 
    local n;
    case ${1-} in 
        -a)
            n='6\?'
        ;;
        -6)
            n='6'
        ;;
        *)
            n=
        ;;
    esac;
    local PATH=$PATH:/sbin;
    local addrs=$({
        LC_ALL=C ifconfig -a || ip addr show
    } 2>/dev/null |
        command sed -e 's/[[:space:]]addr:/ /' -ne             "s|.*inet${n}[[:space:]]\{1,\}\([^[:space:]/]*\).*|\1|p");
    COMPREPLY+=($(compgen -W "$addrs" -- "${cur-}"))
}
_ipa () 
{ 
    cur=${COMP_WORDS[COMP_CWORD]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    if [ $COMP_CWORD -eq 1 ]; then
        COMPREPLY=($( compgen -W "$(_ipa_commands)" $cur ));
    else
        if [ $COMP_CWORD -eq 2 ]; then
            case "$prev" in 
                help)
                    COMPREPLY=($( compgen -W "$(_ipa_commands) commands" $cur ))
                ;;
            esac;
        fi;
    fi
}
_ipa_commands () 
{ 
    ipa help commands 2> /dev/null | sed -r 's/^([-[:alnum:]]*).*/\1/' | grep '^[[:alnum:]]'
}
_isCompoptNeeded () 
{ 
    index=$1;
    nodeType=$2;
    sonsList=$3;
    [[ nodeType -eq 4 ]] && [[ $( _isLastCommand $index 2 ) -eq 1 ]] && echo 1 || echo 0
}
_isFirstSon () 
{ 
    distanceFromLast=$( _getDistanceFromCmdEnd $1 );
    ret=0;
    if [[ distanceFromLast -eq 1 ]]; then
        ret=1;
    fi;
    echo $ret
}
_isLastCommand () 
{ 
    index=$1;
    lastCommand=$2;
    ret=0;
    if [[ index -eq lastCommand ]] || [[ lastCommand -eq -1 ]]; then
        ret=1;
    fi;
    echo $ret
}
_isLastValPartOfSons () 
{ 
    speedsList=($(compgen -W "$1" ));
    isUpperCaseNeed=$( _getUpperNeedFromHash $3 );
    if [[ $isUpperCaseNeed == 1 ]]; then
        lastVal=$(echo $2 | awk '{print toupper($0)}');
    else
        lastVal=$2;
    fi;
    local ret=0;
    for speed in ${speedsList[@]};
    do
        if [[ $speed == "$lastVal"* ]]; then
            ret=1;
        fi;
    done;
    echo $ret
}
_isWordslistContainsWord () 
{ 
    wordsList=$1;
    word=$2;
    [[ $word != "" ]] && [[ $wordsList =~ (^|[[:space:]])$word($|[[:space:]]) ]] && echo 1 || echo 0
}
_kernel_versions () 
{ 
    COMPREPLY=($(compgen -W '$(command ls /lib/modules)' -- "$cur"))
}
_known_hosts () 
{ 
    local cur prev words cword;
    _init_completion -n : || return;
    local options;
    [[ ${1-} == -a || ${2-} == -a ]] && options=-a;
    [[ ${1-} == -c || ${2-} == -c ]] && options+=" -c";
    _known_hosts_real ${options-} -- "$cur"
}
_known_hosts_real () 
{ 
    local configfile flag prefix="" ifs=$IFS;
    local cur suffix="" aliases i host ipv4 ipv6;
    local -a kh tmpkh=() khd=() config=();
    local OPTIND=1;
    while getopts "ac46F:p:" flag "$@"; do
        case $flag in 
            a)
                aliases='yes'
            ;;
            c)
                suffix=':'
            ;;
            F)
                configfile=$OPTARG
            ;;
            p)
                prefix=$OPTARG
            ;;
            4)
                ipv4=1
            ;;
            6)
                ipv6=1
            ;;
            *)
                echo "bash_completion: $FUNCNAME: usage error" 1>&2;
                return 1
            ;;
        esac;
    done;
    if (($# < OPTIND)); then
        echo "bash_completion: $FUNCNAME: missing mandatory argument CWORD" 1>&2;
        return 1;
    fi;
    cur=${!OPTIND};
    ((OPTIND += 1));
    if (($# >= OPTIND)); then
        echo "bash_completion: $FUNCNAME($*): unprocessed arguments:" "$(while (($# >= OPTIND)); do
                printf '%s ' ${!OPTIND}
                shift
            done)" 1>&2;
        return 1;
    fi;
    [[ $cur == *@* ]] && prefix=$prefix${cur%@*}@ && cur=${cur#*@};
    kh=();
    if [[ -v configfile ]]; then
        [[ -r $configfile ]] && config+=("$configfile");
    else
        for i in /etc/ssh/ssh_config ~/.ssh/config ~/.ssh2/config;
        do
            [[ -r $i ]] && config+=("$i");
        done;
    fi;
    local reset=$(shopt -po noglob);
    set -o noglob;
    if ((${#config[@]} > 0)); then
        for i in "${config[@]}";
        do
            _included_ssh_config_files "$i";
        done;
    fi;
    if ((${#config[@]} > 0)); then
        local IFS='
';
        tmpkh=($(awk 'sub("^[ \t]*([Gg][Ll][Oo][Bb][Aa][Ll]|[Uu][Ss][Ee][Rr])[Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss][Ff][Ii][Ll][Ee][ \t]+", "") { print $0 }' "${config[@]}" | sort -u));
        IFS=$ifs;
    fi;
    if ((${#tmpkh[@]} != 0)); then
        local j;
        for i in "${tmpkh[@]}";
        do
            while [[ $i =~ ^([^\"]*)\"([^\"]*)\"(.*)$ ]]; do
                i=${BASH_REMATCH[1]}${BASH_REMATCH[3]};
                j=${BASH_REMATCH[2]};
                __expand_tilde_by_ref j;
                [[ -r $j ]] && kh+=("$j");
            done;
            for j in $i;
            do
                __expand_tilde_by_ref j;
                [[ -r $j ]] && kh+=("$j");
            done;
        done;
    fi;
    if [[ ! -v configfile ]]; then
        for i in /etc/ssh/ssh_known_hosts /etc/ssh/ssh_known_hosts2 /etc/known_hosts /etc/known_hosts2 ~/.ssh/known_hosts ~/.ssh/known_hosts2;
        do
            [[ -r $i ]] && kh+=("$i");
        done;
        for i in /etc/ssh2/knownhosts ~/.ssh2/hostkeys;
        do
            [[ -d $i ]] && khd+=("$i"/*pub);
        done;
    fi;
    if ((${#kh[@]} + ${#khd[@]} > 0)); then
        if ((${#kh[@]} > 0)); then
            for i in "${kh[@]}";
            do
                while read -ra tmpkh; do
                    ((${#tmpkh[@]} == 0)) && continue;
                    set -- "${tmpkh[@]}";
                    [[ $1 == [\|\#]* ]] && continue;
                    [[ $1 == @* ]] && shift;
                    local IFS=,;
                    for host in $1;
                    do
                        [[ $host == *[*?]* ]] && continue;
                        host="${host#[}";
                        host="${host%]?(:+([0-9]))}";
                        COMPREPLY+=($host);
                    done;
                    IFS=$ifs;
                done < "$i";
            done;
            COMPREPLY=($(compgen -W '${COMPREPLY[@]}' -- "$cur"));
        fi;
        if ((${#khd[@]} > 0)); then
            for i in "${khd[@]}";
            do
                if [[ $i == *key_22_$cur*.pub && -r $i ]]; then
                    host=${i/#*key_22_/};
                    host=${host/%.pub/};
                    COMPREPLY+=($host);
                fi;
            done;
        fi;
        for i in ${!COMPREPLY[*]};
        do
            COMPREPLY[i]=$prefix${COMPREPLY[i]}$suffix;
        done;
    fi;
    if [[ ${#config[@]} -gt 0 && -v aliases ]]; then
        local -a hosts=($(command sed -ne 's/^[[:blank:]]*[Hh][Oo][Ss][Tt][[:blank:]]\(.*\)$/\1/p' "${config[@]}"));
        if ((${#hosts[@]} != 0)); then
            COMPREPLY+=($(compgen -P "$prefix"                 -S "$suffix" -W '${hosts[@]%%[*?%]*}' -X '\!*' -- "$cur"));
        fi;
    fi;
    if [[ -n ${COMP_KNOWN_HOSTS_WITH_AVAHI-} ]] && type avahi-browse &> /dev/null; then
        COMPREPLY+=($(compgen -P "$prefix" -S "$suffix" -W             "$(avahi-browse -cpr _workstation._tcp 2>/dev/null |
                awk -F';' '/^=/ { print $7 }' | sort -u)" -- "$cur"));
    fi;
    if type ruptime &> /dev/null; then
        COMPREPLY+=($(compgen -W             "$(ruptime 2>/dev/null | awk '!/^ruptime:/ { print $1 }')"             -- "$cur"));
    fi;
    if [[ -n ${COMP_KNOWN_HOSTS_WITH_HOSTFILE-1} ]]; then
        COMPREPLY+=($(compgen -A hostname -P "$prefix" -S "$suffix" -- "$cur"));
    fi;
    $reset;
    if [[ -v ipv4 ]]; then
        COMPREPLY=("${COMPREPLY[@]/*:*$suffix/}");
    fi;
    if [[ -v ipv6 ]]; then
        COMPREPLY=("${COMPREPLY[@]/+([0-9]).+([0-9]).+([0-9]).+([0-9])$suffix/}");
    fi;
    if [[ -v ipv4 || -v ipv6 ]]; then
        for i in "${!COMPREPLY[@]}";
        do
            [[ -n ${COMPREPLY[i]} ]] || unset -v "COMPREPLY[i]";
        done;
    fi;
    __ltrim_colon_completions "$prefix$cur"
}
_lldpad_options () 
{ 
    local cur prev opts;
    COMPREPLY=();
    cur="${COMP_WORDS[COMP_CWORD]}";
    prev="${COMP_WORDS[COMP_CWORD-1]}";
    opts="-h -f -d -k -s -v -V";
    case "${cur}" in 
        *)
            COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        ;;
    esac;
    case "${prev}" in 
        -f)
            _filedir;
            return 0
        ;;
    esac;
    return 0
}
_lldptool_options () 
{ 
    local cur prev opts cmds opts_and_cmds;
    COMPREPLY=();
    cur="${COMP_WORDS[COMP_CWORD]}";
    prev="${COMP_WORDS[COMP_CWORD-1]}";
    cmds="license -h help -v version -q quit -s stats -t get-tlv -T set-tlv -l get-lldp -L set-lldp";
    opts="-i -V -n -a -d -r -R";
    opts_and_cmds="$opts $cmds";
    case "${cur}" in 
        *)
            COMPREPLY=($(compgen -W "${opts_and_cmds}" -- ${cur}))
        ;;
    esac;
    case "${prev}" in 
        -i)
            _available_interfaces;
            return 0
        ;;
    esac;
    return 0
}
_longopt () 
{ 
    local cur prev words cword split;
    _init_completion -s || return;
    case "${prev,,}" in 
        --help | --usage | --version)
            return
        ;;
        --!(no-*)dir*)
            _filedir -d;
            return
        ;;
        --!(no-*)@(file|path)*)
            _filedir;
            return
        ;;
        --+([-a-z0-9_]))
            local argtype=$(LC_ALL=C $1 --help 2>&1 | command sed -ne                 "s|.*$prev\[\{0,1\}=[<[]\{0,1\}\([-A-Za-z0-9_]\{1,\}\).*|\1|p");
            case ${argtype,,} in 
                *dir*)
                    _filedir -d;
                    return
                ;;
                *file* | *path*)
                    _filedir;
                    return
                ;;
            esac
        ;;
    esac;
    $split && return;
    if [[ $cur == -* ]]; then
        COMPREPLY=($(compgen -W "$(LC_ALL=C $1 --help 2>&1 |
            while read -r line; do
                [[ $line =~ --[A-Za-z0-9]+([-_][A-Za-z0-9]+)*=? ]] &&
                    printf '%s\n' ${BASH_REMATCH[0]}
            done)" -- "$cur"));
        [[ ${COMPREPLY-} == *= ]] && compopt -o nospace;
    else
        if [[ $1 == *@(rmdir|chroot) ]]; then
            _filedir -d;
        else
            [[ $1 == *mkdir ]] && compopt -o nospace;
            _filedir;
        fi;
    fi
}
_mac_addresses () 
{ 
    local re='\([A-Fa-f0-9]\{2\}:\)\{5\}[A-Fa-f0-9]\{2\}';
    local PATH="$PATH:/sbin:/usr/sbin";
    COMPREPLY+=($(
        {
            LC_ALL=C ifconfig -a || ip link show
        } 2>/dev/null | command sed -ne             "s/.*[[:space:]]HWaddr[[:space:]]\{1,\}\($re\)[[:space:]].*/\1/p" -ne             "s/.*[[:space:]]HWaddr[[:space:]]\{1,\}\($re\)[[:space:]]*$/\1/p" -ne             "s|.*[[:space:]]\(link/\)\{0,1\}ether[[:space:]]\{1,\}\($re\)[[:space:]].*|\2|p" -ne             "s|.*[[:space:]]\(link/\)\{0,1\}ether[[:space:]]\{1,\}\($re\)[[:space:]]*$|\2|p"
    ));
    COMPREPLY+=($({
        arp -an || ip neigh show
    } 2>/dev/null | command sed -ne         "s/.*[[:space:]]\($re\)[[:space:]].*/\1/p" -ne         "s/.*[[:space:]]\($re\)[[:space:]]*$/\1/p"));
    COMPREPLY+=($(command sed -ne         "s/^[[:space:]]*\($re\)[[:space:]].*/\1/p" /etc/ethers 2>/dev/null));
    COMPREPLY=($(compgen -W '${COMPREPLY[@]}' -- "$cur"));
    __ltrim_colon_completions "$cur"
}
_mget_temp () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n mget_temp -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_minimal () 
{ 
    local cur prev words cword split;
    _init_completion -s || return;
    $split && return;
    _filedir
}
_ml () 
{ 
    local cur="${2}" prev="${3}" cmds opts found;
    COMPREPLY=();
    cmds="add avail delete help keyword list load purge rm restore         save sl show spider swap unload unuse update use whatis";
    opts="-d -D -h -q -t -v -w -s --style --expert --quiet --help         --quiet --terse --version --default --Verbose --width -r --regexp --mt";
    case "${prev}" in 
        rm | remove | unload | switch | swap)
            COMPREPLY=($(compgen -W "$(_module_loaded_modules)" -- "${cur}"))
        ;;
        restore)
            COMPREPLY=($(compgen -W "$(_module_savelist)" -- "${cur}"))
        ;;
        spider)
            COMPREPLY=($(compgen -W "$(_module_spider)" -- "${cur}"))
        ;;
        unuse)
            COMPREPLY=($(IFS=: compgen -W "${MODULEPATH}" -- "${cur}"))
        ;;
        use | *-a*)
            _module_dir "${cur}"
        ;;
        help | show | whatis)
            COMPREPLY=($(compgen -W "$(_module_avail)" -- "${cur}"))
        ;;
        *)
            case "${cur}" in 
                -*)
                    if [ ${COMP_CWORD} -eq 1 ]; then
                        COMPREPLY=($(compgen -W "${opts} $(_module_loaded_modules_negated)" -- "${cur}"));
                    else
                        COMPREPLY=($(compgen -W "        $(_module_loaded_modules_negated)" -- "${cur}"));
                    fi
                ;;
                *)
                    if [ ${COMP_CWORD} -eq 1 ]; then
                        case "${cur}" in 
                            ls)
                                COMPREPLY='list'
                            ;;
                            sw*)
                                COMPREPLY='swap'
                            ;;
                            *)
                                COMPREPLY=($(compgen -W "${cmds} $(_module_avail)" -- "${cur}"))
                            ;;
                        esac;
                    else
                        if [[ ${COMP_WORDS[COMP_CWORD-2]} == sw* ]]; then
                            COMPREPLY=($(compgen -W "$(_module_not_yet_loaded)" -- "${cur}"));
                        else
                            for ((i = COMP_CWORD - 1; i > 0; i--))
                            do
                                case ${COMP_WORDS[$i]} in 
                                    show | whatis)
                                        COMPREPLY=($(compgen -W "$(_module_avail)" -- "${cur}"));
                                        found=1;
                                        break
                                    ;;
                                    rm | remove | unload)
                                        COMPREPLY=($(compgen -W "$(_module_loaded_modules)" -- "${cur}"));
                                        found=1;
                                        break
                                    ;;
                                    spider)
                                        COMPREPLY=($(compgen -W "$(_module_spider)" -- "${cur}"));
                                        found=1;
                                        break
                                    ;;
                                esac;
                            done;
                            if [ -z "${found}" ]; then
                                COMPREPLY=($(compgen -W "$(_module_avail)" -- "${cur}"));
                            fi;
                        fi;
                    fi
                ;;
            esac
        ;;
    esac
}
_mlxburn () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n mlxburn -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_mlxcables () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n mlxcables -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_mlxconfig () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n mlxconfig -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_mlxdump () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n mlxdump -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_mlxfwmanager () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n mlxfwmanager -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_mlxfwreset () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n mlxfwreset -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_mlxlink () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n mlxlink -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_module () 
{ 
    local cur="${2}" prev="${3}" cmds opts;
    COMPREPLY=();
    cmds="add avail delete help keyword list load purge rm restore         save show spider swap unload unuse update use whatis";
    opts="-d -D -h -q -t -v -w -s --style --expert --quiet --help         --quiet --terse --version --default --width -r --regexp --mt";
    case "${prev}" in 
        add | load | try-load)
            COMPREPLY=($(compgen -W "$(_module_not_yet_loaded)" -- "${cur}"))
        ;;
        rm | remove | unload | switch | swap)
            COMPREPLY=($(compgen -W "$(_module_loaded_modules)" -- "${cur}"))
        ;;
        restore)
            COMPREPLY=($(compgen -W "$(_module_savelist)" -- "${cur}"))
        ;;
        spider)
            COMPREPLY=($(compgen -W "$(_module_spider)" -- "${cur}"))
        ;;
        unuse)
            COMPREPLY=($(IFS=: compgen -W "${MODULEPATH}" -- "${cur}"))
        ;;
        use | *-a*)
            _module_dir "${cur}"
        ;;
        help | show | whatis)
            COMPREPLY=($(compgen -W "$(_module_avail)" -- "${cur}"))
        ;;
        describe | mcc)
            COMPREPLY=($(compgen -W "$(_module_mcc)" -- "${cur}"))
        ;;
        disable)
            COMPREPLY=($(compgen -W "$(_module_mcc)" -- "${cur}"))
        ;;
        *)
            if [ ${COMP_CWORD} -gt 2 ]; then
                _module_long_arg_list "${cur}";
            else
                case "${cur}" in 
                    ls)
                        COMPREPLY='list'
                    ;;
                    sw*)
                        COMPREPLY='swap'
                    ;;
                    -*)
                        COMPREPLY=($(compgen -W "${opts}" -- "${cur}"))
                    ;;
                    *)
                        COMPREPLY=($(compgen -W "${cmds}" -- "${cur}"))
                    ;;
                esac;
            fi
        ;;
    esac
}
_module_avail () 
{ 
    /usr/share/lmod/lmod/libexec/lmod bash --no_redirect -t -q avail 2>&1 > /dev/null | sed ' /:$/d; s/(@.*)//g; s#/*$##g;'
}
_module_describe () 
{ 
    /usr/share/lmod/lmod/libexec/lmod bash -q -t --no_redirect savelist 2>&1 > /dev/null
}
_module_dir () 
{ 
    local cur="${1}" pattern i;
    if [[ "${cur:0:1}" == '$' ]]; then
        pattern='^\$[[:alnum:]_]+\/$';
        if [[ ${cur} =~ ${pattern} ]]; then
            eval COMPREPLY[0]="${cur}";
        else
            COMPREPLY=($( compgen -v -P '$' -- "${cur:1}" ));
            local -a FILTEREDCOMPREPLY;
            for ((i=0; i < ${#COMPREPLY[@]}; i++))
            do
                pattern='^\$[[:alnum:]_]+$';
                if [[ ${COMPREPLY[$i]} =~ ${pattern} ]]; then
                    eval local env_val="${COMPREPLY[$i]}";
                    if [ -d "${env_val}" ]; then
                        FILTEREDCOMPREPLY+=(${COMPREPLY[$i]});
                    fi;
                fi;
            done;
            COMPREPLY=(${FILTEREDCOMPREPLY[@]});
        fi;
    else
        if [[ "${cur:0:1}" == '~' ]]; then
            if [[ "${cur}" != "${cur//\/}" ]]; then
                eval COMPREPLY[0]="${cur%%\/*}"/'${cur#*\/}';
            else
                eval COMPREPLY[0]="~";
            fi;
        else
            COMPREPLY=($(compgen -d -- "${cur}"));
        fi;
    fi;
    if [[ ${#COMPREPLY[@]} -eq 1 ]]; then
        pattern='\/$';
        if [[ -d "${COMPREPLY[0]}" && ! "${COMPREPLY[0]}" =~ ${pattern} ]]; then
            COMPREPLY[0]="${COMPREPLY[0]}/";
        fi;
        compopt -o nospace;
    fi
}
_module_disable () 
{ 
    /usr/share/lmod/lmod/libexec/lmod bash -q -t --no_redirect savelist 2>&1 > /dev/null
}
_module_loaded_modules () 
{ 
    /usr/share/lmod/lmod/libexec/lmod bash -q -t --no_redirect list 2>&1 > /dev/null | sed ' /^ *$/d; /:$/d; s#/*$##g;'
}
_module_loaded_modules_negated () 
{ 
    /usr/share/lmod/lmod/libexec/lmod bash -q -t --no_redirect list 2>&1 > /dev/null | sed ' /^ *$/d; /:$/d; s#/*$##g; s|^|-|g;'
}
_module_long_arg_list () 
{ 
    local cur="${1}" i;
    if [[ ${COMP_WORDS[COMP_CWORD-2]} == sw* ]]; then
        COMPREPLY=($(compgen -W "$(_module_not_yet_loaded)" -- "${cur}"));
        return;
    fi;
    for ((i = COMP_CWORD - 1; i > 0; i--))
    do
        case ${COMP_WORDS[${i}]} in 
            add | load)
                COMPREPLY=($(compgen -W "$(_module_not_yet_loaded)" -- "${cur}"));
                break
            ;;
            rm | remove | unload | switch | swap)
                COMPREPLY=($(compgen -W "$(_module_loaded_modules)" -- "${cur}"));
                break
            ;;
        esac;
    done
}
_module_mcc () 
{ 
    /usr/share/lmod/lmod/libexec/lmod bash -q -t --no_redirect savelist 2>&1 > /dev/null
}
_module_not_yet_loaded () 
{ 
    comm -23 <(_module_avail|sort) <(_module_loaded_modules|sort)
}
_module_savelist () 
{ 
    /usr/share/lmod/lmod/libexec/lmod bash -q -t --no_redirect savelist 2>&1 > /dev/null
}
_module_spider () 
{ 
    /usr/share/lmod/lmod/libexec/lmod bash -q -t --no_redirect spider 2>&1 > /dev/null
}
_modules () 
{ 
    local modpath;
    modpath=/lib/modules/$1;
    COMPREPLY=($(compgen -W "$(command ls -RL $modpath 2>/dev/null |
        command sed -ne 's/^\(.*\)\.k\{0,1\}o\(\.[gx]z\)\{0,1\}$/\1/p')" -- "$cur"))
}
_mst () 
{ 
    source <(cat << EOF
$( $PYTHON_EXEC /etc/bash_completion.d/mft/mft_help_to_completion.py -n mst -c "$COMP_LINE" )
EOF
);
    _runAutoComplete
}
_ncpus () 
{ 
    local var=NPROCESSORS_ONLN;
    [[ $OSTYPE == *linux* ]] && var=_$var;
    local n=$(getconf $var 2>/dev/null);
    printf %s ${n:-1}
}
_parse_help () 
{ 
    eval local cmd="$(quote "$1")";
    local line;
    { 
        case $cmd in 
            -)
                cat
            ;;
            *)
                LC_ALL=C "$(dequote "$cmd")" ${2:---help} 2>&1
            ;;
        esac
    } | while read -r line; do
        [[ $line == *([[:blank:]])-* ]] || continue;
        while [[ $line =~ ((^|[^-])-[A-Za-z0-9?][[:space:]]+)\[?[A-Z0-9]+([,_-]+[A-Z0-9]+)?(\.\.+)?\]? ]]; do
            line=${line/"${BASH_REMATCH[0]}"/"${BASH_REMATCH[1]}"};
        done;
        __parse_options "${line// or /, }";
    done
}
_parse_usage () 
{ 
    eval local cmd="$(quote "$1")";
    local line match option i char;
    { 
        case $cmd in 
            -)
                cat
            ;;
            *)
                LC_ALL=C "$(dequote "$cmd")" ${2:---usage} 2>&1
            ;;
        esac
    } | while read -r line; do
        while [[ $line =~ \[[[:space:]]*(-[^]]+)[[:space:]]*\] ]]; do
            match=${BASH_REMATCH[0]};
            option=${BASH_REMATCH[1]};
            case $option in 
                -?(\[)+([a-zA-Z0-9?]))
                    for ((i = 1; i < ${#option}; i++))
                    do
                        char=${option:i:1};
                        [[ $char != '[' ]] && printf '%s\n' -$char;
                    done
                ;;
                *)
                    __parse_options "$option"
                ;;
            esac;
            line=${line#*"$match"};
        done;
    done
}
_pci_ids () 
{ 
    COMPREPLY+=($(compgen -W         "$(PATH="$PATH:/sbin" lspci -n | awk '{print $3}')" -- "$cur"))
}
_perf () 
{ 
    if [[ "$COMP_WORDBREAKS" != *,* ]]; then
        COMP_WORDBREAKS="${COMP_WORDBREAKS},";
        export COMP_WORDBREAKS;
    fi;
    if [[ "$COMP_WORDBREAKS" == *:* ]]; then
        COMP_WORDBREAKS="${COMP_WORDBREAKS/:/}";
        export COMP_WORDBREAKS;
    fi;
    local cur words cword prev;
    if [ $preload_get_comp_words_by_ref = "true" ]; then
        _get_comp_words_by_ref -n =:, cur words cword prev;
    else
        __perf_get_comp_words_by_ref -n =:, cur words cword prev;
    fi;
    __perf_main
}
_perl () 
{ 
    local cur prev words cword;
    _init_completion -n : || return;
    local prefix="" temp optPrefix optSuffix;
    if [[ $cur == -?* ]]; then
        temp=$cur;
        prev=${temp:0:2};
        cur=${temp:2};
        if [[ $prev == -d && $cur == t* ]]; then
            prev=-dt;
            cur=${cur:1};
        fi;
        optPrefix=-P$prev;
        optSuffix=-S/;
        prefix=$prev;
        case $prev in 
            -*[DeEiFl])
                return
            ;;
            -*[Ix])
                local IFS='
';
                compopt -o filenames;
                COMPREPLY=($(compgen -d $optPrefix $optSuffix -- "$cur"));
                return
            ;;
            -*[mM])
                temp="${cur#-}";
                prefix+="${cur%$temp}";
                cur="$temp";
                _perl_helper modules $1;
                return
            ;;
            -*V)
                if [[ $cur == :* ]]; then
                    temp="${cur##+(:)}";
                    prefix+="${cur%$temp}";
                    local IFS='
';
                    COMPREPLY=($(compgen -P "$prefix" -W                         '$($1 -MConfig -e "print join \"\\n\",
                           keys %Config::Config" 2>/dev/null)' -- "$temp"));
                    __ltrim_colon_completions "$prefix$temp";
                fi;
                return
            ;;
            -*d | -*dt)
                if [[ $cur == :* ]]; then
                    temp="${cur#:}";
                    prefix="$prefix${cur%$temp}";
                    cur="Devel::$temp";
                    _perl_helper modules $1;
                fi
            ;;
        esac;
    else
        if [[ $prev == -e ]] || [[ $prev == -E ]]; then
            return;
        else
            if [[ $prev == -I ]]; then
                local IFS='
';
                compopt -o filenames;
                COMPREPLY=($(compgen -d ${optPrefix-} ${optSuffix-} -- "$cur"));
                return;
            else
                if [[ $cur == -* ]]; then
                    COMPREPLY=($(compgen -W '-C -s -T -u -U -W -X -h -v -V -c -w -d -D -p
            -n -a -F -l -0 -I -m -M -P -S -x -i -e' -- "$cur"));
                else
                    _filedir;
                fi;
            fi;
        fi;
    fi
}
_perl_helper () 
{ 
    COMPREPLY=($(compgen -P "$prefix" -W         "$(${2:-perl} ${BASH_SOURCE[0]%/*}/../helpers/perl $1 $cur)"         -- "$cur"));
    [[ $1 == functions ]] || __ltrim_colon_completions "$prefix$cur"
}
_perldoc () 
{ 
    local cur prev words cword;
    _init_completion -n : || return;
    local prefix="" temp;
    if [[ $cur == -?* ]]; then
        temp=$cur;
        prev=${temp:0:2};
        cur=${temp:2};
        prefix=$prev;
    fi;
    local perl="${1%doc}";
    [[ $perl == "$1" ]] || ! type $perl &> /dev/null && perl=;
    case $prev in 
        -*[hVnoMwL])
            return
        ;;
        -*d)
            _filedir;
            return
        ;;
        -*f)
            _perl_helper functions $perl;
            return
        ;;
    esac;
    if [[ $cur == -* ]]; then
        COMPREPLY=($(compgen -W '$(_parse_help "$1" -h)' -- "$cur"));
    else
        if [[ $cur != @(*/|[.~])* ]]; then
            _perl_helper perldocs $perl;
            if [[ $cur == p* ]]; then
                COMPREPLY+=($(compgen -W                     '$(PERLDOC_PAGER=cat "$1" -u perl |  \
                       command sed -ne "/perl.*Perl overview/,/perlwin32/p" | \
                       awk "\$NF=2 && \$1 ~ /^perl/ { print \$1 }")'                     -- "$cur"));
            fi;
        fi;
        _filedir 'p@([lm]|od)';
    fi
}
_pgids () 
{ 
    COMPREPLY=($(compgen -W '$(command ps axo pgid=)' -- "$cur"))
}
_pids () 
{ 
    COMPREPLY=($(compgen -W '$(command ps axo pid=)' -- "$cur"))
}
_pnames () 
{ 
    local -a procs;
    if [[ ${1-} == -s ]]; then
        procs=($(command ps axo comm | command sed -e 1d));
    else
        local line i=-1 ifs=$IFS;
        IFS='
';
        local -a psout=($(command ps axo command=));
        IFS=$ifs;
        for line in "${psout[@]}";
        do
            if ((i == -1)); then
                if [[ $line =~ ^(.*[[:space:]])COMMAND([[:space:]]|$) ]]; then
                    i=${#BASH_REMATCH[1]};
                else
                    break;
                fi;
            else
                line=${line:i};
                line=${line%% *};
                procs+=($line);
            fi;
        done;
        if ((i == -1)); then
            for line in "${psout[@]}";
            do
                if [[ $line =~ ^[[(](.+)[])]$ ]]; then
                    procs+=(${BASH_REMATCH[1]});
                else
                    line=${line%% *};
                    line=${line##@(*/|-)};
                    procs+=($line);
                fi;
            done;
        fi;
    fi;
    COMPREPLY=($(compgen -X "<defunct>" -W '${procs[@]}' -- "$cur"))
}
_printDebug () 
{ 
    debugMsg=$1;
    echo -e "\n $debugMsg"
}
_python_argcomplete () 
{ 
    local IFS='';
    local SUPPRESS_SPACE=0;
    if compopt +o nospace 2> /dev/null; then
        SUPPRESS_SPACE=1;
    fi;
    COMPREPLY=($(IFS="$IFS"                   COMP_LINE="$COMP_LINE"                   COMP_POINT="$COMP_POINT"                   COMP_TYPE="$COMP_TYPE"                   _ARGCOMPLETE_COMP_WORDBREAKS="$COMP_WORDBREAKS"                   _ARGCOMPLETE=1                   _ARGCOMPLETE_SUPPRESS_SPACE=$SUPPRESS_SPACE                   __python_argcomplete_run "$1"));
    if [[ $? != 0 ]]; then
        unset COMPREPLY;
    else
        if [[ $SUPPRESS_SPACE == 1 ]] && [[ "$COMPREPLY" =~ [=/:]$ ]]; then
            compopt -o nospace;
        fi;
    fi
}
_python_argcomplete_global () 
{ 
    local executable=$1;
    __python_argcomplete_expand_tilde_by_ref executable;
    local ARGCOMPLETE=0;
    if [[ "$executable" == python* ]] || [[ "$executable" == pypy* ]]; then
        if [[ "${COMP_WORDS[1]}" == -m ]]; then
            if __python_argcomplete_run "$executable" -m argcomplete._check_module "${COMP_WORDS[2]}"; then
                ARGCOMPLETE=3;
            else
                return;
            fi;
        else
            if [[ -f "${COMP_WORDS[1]}" ]] && __python_argcomplete_scan_head_noerr "${COMP_WORDS[1]}"; then
                local ARGCOMPLETE=2;
            else
                return;
            fi;
        fi;
    else
        if type -P "$executable" > /dev/null 2>&1; then
            local SCRIPT_NAME=$(type -P "$executable");
            if ( type -t pyenv && [[ "$SCRIPT_NAME" = $(pyenv root)/shims/* ]] ) > /dev/null 2>&1; then
                local SCRIPT_NAME=$(pyenv which "$executable");
            fi;
            if __python_argcomplete_scan_head_noerr "$SCRIPT_NAME"; then
                local ARGCOMPLETE=1;
            else
                if __python_argcomplete_scan_head_noerr "$SCRIPT_NAME" '^#!(.*)$' -n && [[ "${BASH_REMATCH[1]}" =~ ^.*(python|pypy)[0-9\.]*$ ]]; then
                    local interpreter="$BASH_REMATCH";
                    if ( __python_argcomplete_scan_head_noerr "$SCRIPT_NAME" "(PBR Generated)|(EASY-INSTALL-(SCRIPT|ENTRY-SCRIPT|DEV-SCRIPT))" && "$interpreter" "$(type -P python-argcomplete-check-easy-install-script)" "$SCRIPT_NAME" ) > /dev/null 2>&1; then
                        local ARGCOMPLETE=1;
                    else
                        if __python_argcomplete_run "$interpreter" -m argcomplete._check_console_script "$SCRIPT_NAME"; then
                            local ARGCOMPLETE=1;
                        fi;
                    fi;
                fi;
            fi;
        fi;
    fi;
    if [[ $ARGCOMPLETE != 0 ]]; then
        local IFS=$(echo -e '\v');
        COMPREPLY=($(_ARGCOMPLETE_IFS="$IFS"             COMP_LINE="$COMP_LINE"             COMP_POINT="$COMP_POINT"             COMP_TYPE="$COMP_TYPE"             _ARGCOMPLETE_COMP_WORDBREAKS="$COMP_WORDBREAKS"             _ARGCOMPLETE=$ARGCOMPLETE             _ARGCOMPLETE_SUPPRESS_SPACE=1             __python_argcomplete_run "$executable" "${COMP_WORDS[@]:1:ARGCOMPLETE-1}"));
        if [[ $? != 0 ]]; then
            unset COMPREPLY;
        else
            if [[ "$COMPREPLY" =~ [=/:]$ ]]; then
                compopt -o nospace;
            fi;
        fi;
    else
        type -t _completion_loader | grep -q 'function' && _completion_loader "$@";
    fi
}
_quote_readline_by_ref () 
{ 
    if [[ $1 == \'* ]]; then
        printf -v $2 %s "${1:1}";
    else
        printf -v $2 %q "$1";
    fi;
    [[ ${!2} == \$* ]] && eval $2=${!2}
}
_realcommand () 
{ 
    type -P "$1" > /dev/null && { 
        if type -p realpath > /dev/null; then
            realpath "$(type -P "$1")";
        else
            if type -p greadlink > /dev/null; then
                greadlink -f "$(type -P "$1")";
            else
                if type -p readlink > /dev/null; then
                    readlink -f "$(type -P "$1")";
                else
                    type -P "$1";
                fi;
            fi;
        fi
    }
}
_removeShownCommandFromSons () 
{ 
    index=$1;
    sonList="$2";
    cmd_line="$( _getCmdLineUpToIndex $index )";
    cmd_line="$( _changeShortCutsOnCmd "$cmd_line" )";
    sonsList=$(  _getListOneWithoutListTwo "$sonsList" "$cmd_line" );
    echo "$sonsList"
}
_removeShownSpeeds () 
{ 
    sonsList="$1";
    cur="${COMP_WORDS[COMP_CWORD]}";
    speedShown="$( _splitStringOnDelimiter "$cur" "," )";
    speedShown="$speedShown $( _addDelimiterToStringList "$speedShown" "," )";
    sonsList="$(  _getListOneWithoutListTwo "$sonsList" "$speedShown" )";
    echo "$sonsList"
}
_rl_enabled () 
{ 
    [[ "$(bind -v)" == *$1+([[:space:]])on* ]]
}
_root_command () 
{ 
    local PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin;
    local root_command=$1;
    _command
}
_runAutoComplete () 
{ 
    local cur="${COMP_WORDS[COMP_CWORD]}";
    if [[ ${cur} == \/* || ${cur} == \.\/* ]]; then
        COMPREPLY=();
        _filedir;
        return 0;
    fi;
    local prev="";
    local sonsList="";
    local nodeType=0;
    local index=1;
    while [[ $sonsList == "" ]]; do
        if [[ index -gt COMP_CWORD ]]; then
            return 0;
        fi;
        prev="${COMP_WORDS[COMP_CWORD-$index]}";
        prev="$( _getFullNodeIfShortcut $prev )";
        nodeType=$( _getNodeTypeIfExist $prev );
        cur=$(_getCurrent $prev $nodeType);
        sonsList="$( _getSonsList $index $prev $nodeType $cur  )";
        index=$(( index + 1 ));
    done;
    if [[ $(_isCompoptNeeded $index $nodeType "$sonsList") -eq 1 ]]; then
        compopt -o nospace;
    fi;
    _getCompreplyVal "$sonsList" "$cur" $nodeType "$prev" $index;
    return 0
}
_scl () 
{ 
    local cur actions cur_action collections;
    COMPREPLY=();
    cur="${COMP_WORDS[COMP_CWORD]}";
    actions="enable run load unload list-collections list-packages man register deregister --help";
    collections=`scl list-collections`;
    if ((COMP_CWORD == 1)); then
        COMPREPLY=($(compgen -W "${actions}" -- ${cur}));
        return 0;
    fi;
    if ((COMP_CWORD > 3)); then
        for word in "${COMP_WORDS[@]}";
        do
            if [[ ${word} == \'* || ${word} == \"* || ${word} == "--" ]]; then
                return 0;
            fi;
        done;
    fi;
    if ((COMP_CWORD >= 2)); then
        cur_action="${COMP_WORDS[1]}";
        case "$cur_action" in 
            list-collections | list-enabled | --help)
                return 0
            ;;
            list-packages | man)
                if ((COMP_CWORD == 2)); then
                    COMPREPLY=($(compgen -W  "$collections" -- ${cur}));
                fi;
                return 0
            ;;
            deregister)
                if ((COMP_CWORD == 2)); then
                    COMPREPLY=($(compgen -W  "$collections --force -f" -- ${cur}));
                fi;
                if [ "$COMP_CWORD" -eq 3 -a "(" "${COMP_WORDS[2]}" == "--force" -o "${COMP_WORDS[2]}" == "-f" ")" ]; then
                    COMPREPLY=($(compgen -W  "$collections" -- ${cur}));
                fi;
                return 0
            ;;
            register)
                compopt -o plusdirs;
                if ((COMP_CWORD == 2)); then
                    COMPREPLY=($(compgen -A  directory -- ${cur}));
                fi;
                return 0
            ;;
            run | enable)
                if ((COMP_CWORD == 2)); then
                    COMPREPLY=($(compgen -W  "$collections -x --exec" -- ${cur}));
                else
                    COMPREPLY=($(compgen -W  "$collections" -- ${cur}));
                fi;
                return 0
            ;;
            load | unload)
                COMPREPLY=($(compgen -W  "$collections" -- ${cur}));
                return 0
            ;;
            *)

            ;;
        esac;
    fi
}
_screen () 
{ 
    local cur prev words cword;
    _init_completion || return;
    if ((cword == 1)); then
        if [[ $cur == /dev* ]]; then
            COMPREPLY=($(compgen -W "$(
                    shopt -s nullglob
                    printf '%s\n'                         /dev/serial/by-id/* /dev/ttyUSB* /dev/ttyACM* 2>/dev/null
                )"                     -- "$cur"));
            return;
        fi;
        if [[ $cur == //* ]]; then
            COMPREPLY=($(compgen -W '//telnet' -- "$cur"));
            return;
        fi;
    fi;
    case ${words[1]} in 
        /dev*)
            if ((cword == 2)); then
                COMPREPLY=($(compgen -W '110 300 600 1200 2400 4800 9600 \
                14400 19200 38400 57600 115200 128000 256000' -- "$cur"));
            fi;
            return
        ;;
        //telnet)
            ((cword == 2)) && _known_hosts_real -- "$cur";
            return
        ;;
    esac;
    if ((cword > 2)); then
        case ${words[cword - 2]} in 
            -*[dD])
                _screen_sessions;
                return
            ;;
        esac;
    fi;
    local i;
    for ((i = 1; i <= cword; i++))
    do
        case ${words[i]} in 
            -*[rRdDxscTehpSt])
                ((i++));
                continue
            ;;
            -*)
                continue
            ;;
        esac;
        _command_offset $i;
        return;
    done;
    case $prev in 
        -*[rR])
            _screen_sessions 'Detached';
            return
        ;;
        -*[dD])
            _screen_sessions 'Attached';
            return
        ;;
        -*x)
            _screen_sessions;
            return
        ;;
        -*s)
            _shells;
            return
        ;;
        -*c)
            _filedir;
            return
        ;;
        -T)
            _terms;
            return
        ;;
        -*[ehpSt])
            return
        ;;
    esac;
    if [[ $cur == -* ]]; then
        COMPREPLY=($(compgen -W '$(_parse_help "$1")' -- "$cur"));
    fi
}
_screen_sessions () 
{ 
    local sessions=($(command screen -ls | command sed -ne         's|^\t\{1,\}\([0-9]\{1,\}\.[^\t]\{1,\}\).*'"$1"'.*$|\1|p'));
    if [[ $cur == +([0-9])?(.*) ]]; then
        COMPREPLY=($(compgen -W '${sessions[@]}' -- "$cur"));
    else
        local -A res;
        local i tmp;
        for i in "${sessions[@]}";
        do
            res[${i/#+([0-9])./}]+=" $i";
        done;
        for i in "${!res[@]}";
        do
            [[ ${res[i]} == \ *\ * ]] && tmp+=" ${res[i]}" || tmp+=" $i";
        done;
        COMPREPLY=($(compgen -W '$tmp' -- "$cur"));
    fi
}
_service () 
{ 
    local cur prev words cword;
    _init_completion || return;
    ((cword > 2)) && return;
    if [[ $cword -eq 1 && $prev == ?(*/)service ]]; then
        _services;
        [[ -e /etc/mandrake-release ]] && _xinetd_services;
    else
        local sysvdirs;
        _sysvdirs;
        COMPREPLY=($(compgen -W '`command sed -e "y/|/ /" \
            -ne "s/^.*\(U\|msg_u\)sage.*{\(.*\)}.*$/\2/p" \
            ${sysvdirs[0]}/${prev##*/} 2>/dev/null` start stop' -- "$cur"));
    fi
}
_services () 
{ 
    local sysvdirs;
    _sysvdirs;
    local IFS=' 	
' reset=$(shopt -p nullglob);
    shopt -s nullglob;
    COMPREPLY=($(printf '%s\n' ${sysvdirs[0]}/!($_backup_glob|functions|README)));
    $reset;
    COMPREPLY+=($({
        systemctl list-units --full --all ||
            systemctl list-unit-files
    } 2>/dev/null |
        awk '$1 ~ /\.service$/ { sub("\\.service$", "", $1); print $1 }'));
    if [[ -x /sbin/upstart-udev-bridge ]]; then
        COMPREPLY+=($(initctl list 2>/dev/null | cut -d' ' -f1));
    fi;
    COMPREPLY=($(compgen -W '${COMPREPLY[@]#${sysvdirs[0]}/}' -- "$cur"))
}
_setDataToHash () 
{ 
    hashNodeStr=$1;
    hashNodeDataCommand=$2;
    foramt=$3;
    val=$4;
    hashNodeStr=$( echo $hashNodeStr | sed  's/[-]*//g' );
    printf -v "test_mode["upperNeed"]" '%d' 2
}
_setUpperNeededToHash () 
{ 
    _setDataToHash "$1" "upperNeed" '%d' $2
}
_shells () 
{ 
    local shell rest;
    while read -r shell rest; do
        [[ $shell == /* && $shell == "$cur"* ]] && COMPREPLY+=($shell);
    done 2> /dev/null < /etc/shells
}
_signals () 
{ 
    local -a sigs=($(compgen -P "${1-}" -A signal "SIG${cur#${1-}}"));
    COMPREPLY+=("${sigs[@]/#${1-}SIG/${1-}}")
}
_sortString () 
{ 
    str=$1;
    echo $str | tr ' ' '\n' | sort | tr '\n' ' '
}
_splitStringOnDelimiter () 
{ 
    str=$1;
    delimiter=$2;
    echo $str | tr $delimiter " "
}
_split_longopt () 
{ 
    if [[ $cur == --?*=* ]]; then
        prev="${cur%%?(\\)=*}";
        cur="${cur#*=}";
        return 0;
    fi;
    return 1
}
_strings () 
{ 
    local cur prev words cword split;
    _init_completion -s || return;
    case $prev in 
        --help | --version | --bytes | -!(-*)[hvVn])
            return
        ;;
        --radix | -!(-*)t)
            COMPREPLY=($(compgen -W 'o d x' -- "$cur"));
            return
        ;;
        --target | -!(-*)T)
            COMPREPLY=($(compgen -W '$(LC_ALL=C "$1" --help 2>/dev/null | \
                command sed -ne "s/: supported targets: \(.*\)/\1/p")'                 -- "$cur"));
            return
        ;;
        --encoding | -!(-*)e)
            COMPREPLY=($(compgen -W 's S b l B L' -- "$cur"));
            return
        ;;
    esac;
    $split && return;
    if [[ $cur == -* ]]; then
        COMPREPLY=($(compgen -W '$(_parse_help "$1")' -- "$cur"));
        [[ ${COMPREPLY-} == *= ]] && compopt -o nospace;
        return;
    else
        if [[ $cur == @* ]]; then
            cur=${cur:1};
            _filedir;
            COMPREPLY=("${COMPREPLY[@]/#/@}");
            return;
        fi;
    fi;
    _filedir
}
_sysfs_get_netdevs () 
{ 
    COMPREPLY+=($( compgen -W "$( ls /sys/class/net 2>/dev/null )" --         "$cur" ))
}
_sysvdirs () 
{ 
    sysvdirs=();
    [[ -d /etc/rc.d/init.d ]] && sysvdirs+=(/etc/rc.d/init.d);
    [[ -d /etc/init.d ]] && sysvdirs+=(/etc/init.d);
    [[ -f /etc/slackware-version ]] && sysvdirs=(/etc/rc.d);
    return 0
}
_terms () 
{ 
    COMPREPLY+=($(compgen -W "$({
        command sed -ne 's/^\([^[:space:]#|]\{2,\}\)|.*/\1/p' /etc/termcap
        {
            toe -a || toe
        } | awk '{ print $1 }'
        find /{etc,lib,usr/lib,usr/share}/terminfo/? -type f -maxdepth 1 |
            awk -F/ '{ print $NF }'
    } 2>/dev/null)" -- "$cur"))
}
_tilde () 
{ 
    local result=0;
    if [[ ${1-} == \~* && $1 != */* ]]; then
        COMPREPLY=($(compgen -P '~' -u -- "${1#\~}"));
        result=${#COMPREPLY[@]};
        ((result > 0)) && compopt -o filenames 2> /dev/null;
    fi;
    return $result
}
_uids () 
{ 
    if type getent &> /dev/null; then
        COMPREPLY=($(compgen -W '$(getent passwd | cut -d: -f3)' -- "$cur"));
    else
        if type perl &> /dev/null; then
            COMPREPLY=($(compgen -W '$(perl -e '"'"'while (($uid) = (getpwent)[2]) { print $uid . "\n" }'"'"')' -- "$cur"));
        else
            COMPREPLY=($(compgen -W '$(cut -d: -f3 /etc/passwd)' -- "$cur"));
        fi;
    fi
}
_upvar () 
{ 
    echo "bash_completion: $FUNCNAME: deprecated function," "use _upvars instead" 1>&2;
    if unset -v "$1"; then
        if (($# == 2)); then
            eval $1=\"\$2\";
        else
            eval $1=\(\"\$"{@:2}"\"\);
        fi;
    fi
}
_upvars () 
{ 
    if ! (($#)); then
        echo "bash_completion: $FUNCNAME: usage: $FUNCNAME" "[-v varname value] | [-aN varname [value ...]] ..." 1>&2;
        return 2;
    fi;
    while (($#)); do
        case $1 in 
            -a*)
                [[ -n ${1#-a} ]] || { 
                    echo "bash_completion: $FUNCNAME:" "\`$1': missing number specifier" 1>&2;
                    return 1
                };
                printf %d "${1#-a}" &> /dev/null || { 
                    echo bash_completion: "$FUNCNAME: \`$1': invalid number specifier" 1>&2;
                    return 1
                };
                [[ -n "$2" ]] && unset -v "$2" && eval $2=\(\"\$"{@:3:${1#-a}}"\"\) && shift $((${1#-a} + 2)) || { 
                    echo bash_completion: "$FUNCNAME: \`$1${2+ }$2': missing argument(s)" 1>&2;
                    return 1
                }
            ;;
            -v)
                [[ -n "$2" ]] && unset -v "$2" && eval $2=\"\$3\" && shift 3 || { 
                    echo "bash_completion: $FUNCNAME: $1:" "missing argument(s)" 1>&2;
                    return 1
                }
            ;;
            *)
                echo "bash_completion: $FUNCNAME: $1: invalid option" 1>&2;
                return 1
            ;;
        esac;
    done
}
_usb_ids () 
{ 
    COMPREPLY+=($(compgen -W         "$(PATH="$PATH:/sbin" lsusb | awk '{print $6}')" -- "$cur"))
}
_user_at_host () 
{ 
    local cur prev words cword;
    _init_completion -n : || return;
    if [[ $cur == *@* ]]; then
        _known_hosts_real "$cur";
    else
        COMPREPLY=($(compgen -u -S @ -- "$cur"));
        compopt -o nospace;
    fi
}
_usergroup () 
{ 
    if [[ $cur == *\\\\* || $cur == *:*:* ]]; then
        return;
    else
        if [[ $cur == *\\:* ]]; then
            local prefix;
            prefix=${cur%%*([^:])};
            prefix=${prefix//\\/};
            local mycur="${cur#*[:]}";
            if [[ ${1-} == -u ]]; then
                _allowed_groups "$mycur";
            else
                local IFS='
';
                COMPREPLY=($(compgen -g -- "$mycur"));
            fi;
            COMPREPLY=($(compgen -P "$prefix" -W "${COMPREPLY[@]}"));
        else
            if [[ $cur == *:* ]]; then
                local mycur="${cur#*:}";
                if [[ ${1-} == -u ]]; then
                    _allowed_groups "$mycur";
                else
                    local IFS='
';
                    COMPREPLY=($(compgen -g -- "$mycur"));
                fi;
            else
                if [[ ${1-} == -u ]]; then
                    _allowed_users "$cur";
                else
                    local IFS='
';
                    COMPREPLY=($(compgen -u -- "$cur"));
                fi;
            fi;
        fi;
    fi
}
_userland () 
{ 
    local userland=$(uname -s);
    [[ $userland == @(Linux|GNU/*) ]] && userland=GNU;
    [[ $userland == "$1" ]]
}
_variables () 
{ 
    if [[ $cur =~ ^(\$(\{[!#]?)?)([A-Za-z0-9_]*)$ ]]; then
        if [[ $cur == '${'* ]]; then
            local arrs vars;
            vars=($(compgen -A variable -P ${BASH_REMATCH[1]} -S '}' -- ${BASH_REMATCH[3]}));
            arrs=($(compgen -A arrayvar -P ${BASH_REMATCH[1]} -S '[' -- ${BASH_REMATCH[3]}));
            if ((${#vars[@]} == 1 && ${#arrs[@]} != 0)); then
                compopt -o nospace;
                COMPREPLY+=(${arrs[*]});
            else
                COMPREPLY+=(${vars[*]});
            fi;
        else
            COMPREPLY+=($(compgen -A variable -P '$' -- "${BASH_REMATCH[3]}"));
        fi;
        return 0;
    else
        if [[ $cur =~ ^(\$\{[#!]?)([A-Za-z0-9_]*)\[([^]]*)$ ]]; then
            local IFS='
';
            COMPREPLY+=($(compgen -W '$(printf %s\\n "${!'${BASH_REMATCH[2]}'[@]}")'             -P "${BASH_REMATCH[1]}${BASH_REMATCH[2]}[" -S ']}' -- "${BASH_REMATCH[3]}"));
            if [[ ${BASH_REMATCH[3]} == [@*] ]]; then
                COMPREPLY+=("${BASH_REMATCH[1]}${BASH_REMATCH[2]}[${BASH_REMATCH[3]}]}");
            fi;
            __ltrim_colon_completions "$cur";
            return 0;
        else
            if [[ $cur =~ ^\$\{[#!]?[A-Za-z0-9_]*\[.*\]$ ]]; then
                COMPREPLY+=("$cur}");
                __ltrim_colon_completions "$cur";
                return 0;
            else
                case ${prev-} in 
                    TZ)
                        cur=/usr/share/zoneinfo/$cur;
                        _filedir;
                        for i in "${!COMPREPLY[@]}";
                        do
                            if [[ ${COMPREPLY[i]} == *.tab ]]; then
                                unset 'COMPREPLY[i]';
                                continue;
                            else
                                if [[ -d ${COMPREPLY[i]} ]]; then
                                    COMPREPLY[i]+=/;
                                    compopt -o nospace;
                                fi;
                            fi;
                            COMPREPLY[i]=${COMPREPLY[i]#/usr/share/zoneinfo/};
                        done;
                        return 0
                    ;;
                    TERM)
                        _terms;
                        return 0
                    ;;
                    LANG | LC_*)
                        COMPREPLY=($(compgen -W '$(locale -a 2>/dev/null)'                     -- "$cur"));
                        return 0
                    ;;
                esac;
            fi;
        fi;
    fi;
    return 1
}
_vdostats () 
{ 
    local opts cur;
    _init_completion || return;
    COMPREPLY=();
    opts="--help --all --human-readable --si --verbose --version";
    cur="${COMP_WORDS[COMP_CWORD]}";
    case "${cur}" in 
        *)
            COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        ;;
    esac
}
_xfunc () 
{ 
    set -- "$@";
    local srcfile=$1;
    shift;
    declare -F $1 &> /dev/null || __load_completion "$srcfile";
    "$@"
}
_xinetd_services () 
{ 
    local xinetddir=${BASHCOMP_XINETDDIR:-/etc/xinetd.d};
    if [[ -d $xinetddir ]]; then
        local IFS=' 	
' reset=$(shopt -p nullglob);
        shopt -s nullglob;
        local -a svcs=($(printf '%s\n' $xinetddir/!($_backup_glob)));
        $reset;
        ((!${#svcs[@]})) || COMPREPLY+=($(compgen -W '${svcs[@]#$xinetddir/}' -- "${cur-}"));
    fi
}
clearLmod () 
{ 
    module --force purge;
    eval $($LMOD_DIR/clearLMOD_cmd --shell bash --full "$@")
}
clearMT () 
{ 
    eval $($LMOD_DIR/clearLMOD_cmd --shell bash --simple)
}
command_not_found_handle () 
{ 
    local runcnf=1;
    local retval=127;
    [[ $- == *"i"* ]] || runcnf=0;
    [[ ! -S /run/dbus/system_bus_socket ]] && runcnf=0;
    [[ ! -x '/usr/libexec/packagekitd' ]] && runcnf=0;
    [[ -n ${COMP_CWORD-} ]] && runcnf=0;
    [[ ! -x '/usr/libexec/pk-command-not-found' ]] && runcnf=0;
    if [ $runcnf -eq 1 ]; then
        '/usr/libexec/pk-command-not-found' "$@";
        retval=$?;
    else
        if [[ -n "${BASH_VERSION-}" ]]; then
            printf 'bash: %scommand not found\n' "${1:+$1: }" 1>&2;
        fi;
    fi;
    return $retval
}
dequote () 
{ 
    eval printf %s "$1" 2> /dev/null
}
gawklibpath_append () 
{ 
    [ -z "$AWKLIBPATH" ] && AWKLIBPATH=`gawk 'BEGIN {print ENVIRON["AWKLIBPATH"]}'`;
    export AWKLIBPATH="$AWKLIBPATH:$*"
}
gawklibpath_default () 
{ 
    unset AWKLIBPATH;
    export AWKLIBPATH=`gawk 'BEGIN {print ENVIRON["AWKLIBPATH"]}'`
}
gawklibpath_prepend () 
{ 
    [ -z "$AWKLIBPATH" ] && AWKLIBPATH=`gawk 'BEGIN {print ENVIRON["AWKLIBPATH"]}'`;
    export AWKLIBPATH="$*:$AWKLIBPATH"
}
gawkpath_append () 
{ 
    [ -z "$AWKPATH" ] && AWKPATH=`gawk 'BEGIN {print ENVIRON["AWKPATH"]}'`;
    export AWKPATH="$AWKPATH:$*"
}
gawkpath_default () 
{ 
    unset AWKPATH;
    export AWKPATH=`gawk 'BEGIN {print ENVIRON["AWKPATH"]}'`
}
gawkpath_prepend () 
{ 
    [ -z "$AWKPATH" ] && AWKPATH=`gawk 'BEGIN {print ENVIRON["AWKPATH"]}'`;
    export AWKPATH="$*:$AWKPATH"
}
ml () 
{ 
    eval "$($LMOD_DIR/ml_cmd "$@")"
}
module () 
{ 
    if [ -z "${LMOD_SH_DBG_ON+x}" ]; then
        case "$-" in 
            *v*x*)
                __lmod_sh_dbg='vx'
            ;;
            *v*)
                __lmod_sh_dbg='v'
            ;;
            *x*)
                __lmod_sh_dbg='x'
            ;;
        esac;
    fi;
    if [ -n "${__lmod_sh_dbg:-}" ]; then
        set +$__lmod_sh_dbg;
        echo "Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod's output" 1>&2;
    fi;
    eval "$($LMOD_CMD shell "$@")" && eval "$(${LMOD_SETTARG_CMD:-:} -s sh)";
    __lmod_my_status=$?;
    if [ -n "${__lmod_sh_dbg:-}" ]; then
        echo "Shell debugging restarted" 1>&2;
        set -$__lmod_sh_dbg;
    fi;
    unset __lmod_sh_dbg;
    return $__lmod_my_status
}
quote () 
{ 
    local quoted=${1//\'/\'\\\'\'};
    printf "'%s'" "$quoted"
}
quote_readline () 
{ 
    local ret;
    _quote_readline_by_ref "$1" ret;
    printf %s "$ret"
}
scl () 
{ 
    if [ "$1" = "load" -o "$1" = "unload" ]; then
        eval "module $@";
    else
        /usr/bin/scl "$@";
    fi
}
which () 
{ 
    ( alias;
    eval ${which_declare} ) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot $@
}
xSetTitleLmod () 
{ 
    builtin echo -n -e "\033]2;$1\007"
}
